// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfsnet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cfsnet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace littlstar {
namespace cfsnet {
class AccessFileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AccessFile> {
} _AccessFile_default_instance_;
class CloseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Close> {
} _Close_default_instance_;
class DownloadDirectoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DownloadDirectory> {
} _DownloadDirectory_default_instance_;
class DownloadFileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DownloadFile> {
} _DownloadFile_default_instance_;
class DriveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Drive> {
} _Drive_default_instance_;
class HandshakeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Handshake> {
} _Handshake_default_instance_;
class ListDirectoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListDirectory> {
} _ListDirectory_default_instance_;
class MakeDirectoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MakeDirectory> {
} _MakeDirectory_default_instance_;
class MakeDirectoryPathDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MakeDirectoryPath> {
} _MakeDirectoryPath_default_instance_;
class OpenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Open> {
} _Open_default_instance_;
class ReadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Read> {
} _Read_default_instance_;
class ReadFileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReadFile> {
} _ReadFile_default_instance_;
class RemoveDirectoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RemoveDirectory> {
} _RemoveDirectory_default_instance_;
class RemoveDirectoryPathDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RemoveDirectoryPath> {
} _RemoveDirectoryPath_default_instance_;
class RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Request> {
} _Request_default_instance_;
class ResolveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Resolve> {
} _Resolve_default_instance_;
class ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Response> {
} _Response_default_instance_;
class StatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Stat> {
} _Stat_default_instance_;
class StatFileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StatFile> {
} _StatFile_default_instance_;
class TouchFileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TouchFile> {
} _TouchFile_default_instance_;
class UnlinkFileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnlinkFile> {
} _UnlinkFile_default_instance_;
class WriteFileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WriteFile> {
} _WriteFile_default_instance_;

namespace protobuf_cfsnet_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[22];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessFile, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessFile, mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Close, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Close, fd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDirectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadDirectory, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFile, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drive, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drive, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handshake, nonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handshake, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handshake, ack_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectory, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeDirectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeDirectory, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeDirectoryPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeDirectoryPath, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Open, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Read, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Read, fd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Read, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Read, end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFile, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFile, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadFile, end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDirectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDirectory, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDirectoryPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDirectoryPath, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, nonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, drive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, operation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, buffer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resolve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resolve, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, nonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, drive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, operation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, errorcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, buffer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, blocks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, byteoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, mtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, ctime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatFile, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchFile, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkFile, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteFile, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteFile, buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteFile, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteFile, end_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(AccessFile)},
  { 7, -1, sizeof(Close)},
  { 13, -1, sizeof(DownloadDirectory)},
  { 19, -1, sizeof(DownloadFile)},
  { 25, -1, sizeof(Drive)},
  { 32, -1, sizeof(Handshake)},
  { 40, -1, sizeof(ListDirectory)},
  { 46, -1, sizeof(MakeDirectory)},
  { 52, -1, sizeof(MakeDirectoryPath)},
  { 58, -1, sizeof(Open)},
  { 64, -1, sizeof(Read)},
  { 72, -1, sizeof(ReadFile)},
  { 80, -1, sizeof(RemoveDirectory)},
  { 86, -1, sizeof(RemoveDirectoryPath)},
  { 92, -1, sizeof(Request)},
  { 101, -1, sizeof(Resolve)},
  { 107, -1, sizeof(Response)},
  { 118, -1, sizeof(Stat)},
  { 132, -1, sizeof(StatFile)},
  { 138, -1, sizeof(TouchFile)},
  { 144, -1, sizeof(UnlinkFile)},
  { 150, -1, sizeof(WriteFile)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccessFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Close_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DownloadDirectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DownloadFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Drive_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Handshake_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListDirectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MakeDirectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MakeDirectoryPath_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Open_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Read_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReadFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RemoveDirectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RemoveDirectoryPath_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Resolve_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StatFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TouchFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnlinkFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WriteFile_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cfsnet.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 22);
}

}  // namespace

void TableStruct::Shutdown() {
  _AccessFile_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Close_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _DownloadDirectory_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _DownloadFile_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Drive_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Handshake_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ListDirectory_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _MakeDirectory_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _MakeDirectoryPath_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Open_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _Read_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ReadFile_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _RemoveDirectory_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _RemoveDirectoryPath_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _Request_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _Resolve_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _Response_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _Stat_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _StatFile_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _TouchFile_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _UnlinkFile_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _WriteFile_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _AccessFile_default_instance_.DefaultConstruct();
  _Close_default_instance_.DefaultConstruct();
  _DownloadDirectory_default_instance_.DefaultConstruct();
  _DownloadFile_default_instance_.DefaultConstruct();
  _Drive_default_instance_.DefaultConstruct();
  _Handshake_default_instance_.DefaultConstruct();
  _ListDirectory_default_instance_.DefaultConstruct();
  _MakeDirectory_default_instance_.DefaultConstruct();
  _MakeDirectoryPath_default_instance_.DefaultConstruct();
  _Open_default_instance_.DefaultConstruct();
  _Read_default_instance_.DefaultConstruct();
  _ReadFile_default_instance_.DefaultConstruct();
  _RemoveDirectory_default_instance_.DefaultConstruct();
  _RemoveDirectoryPath_default_instance_.DefaultConstruct();
  _Request_default_instance_.DefaultConstruct();
  _Resolve_default_instance_.DefaultConstruct();
  _Response_default_instance_.DefaultConstruct();
  _Stat_default_instance_.DefaultConstruct();
  _StatFile_default_instance_.DefaultConstruct();
  _TouchFile_default_instance_.DefaultConstruct();
  _UnlinkFile_default_instance_.DefaultConstruct();
  _WriteFile_default_instance_.DefaultConstruct();
  _Request_default_instance_.get_mutable()->drive_ = const_cast< ::littlstar::cfsnet::Drive*>(
      ::littlstar::cfsnet::Drive::internal_default_instance());
  _Response_default_instance_.get_mutable()->drive_ = const_cast< ::littlstar::cfsnet::Drive*>(
      ::littlstar::cfsnet::Drive::internal_default_instance());
  _Response_default_instance_.get_mutable()->request_ = const_cast< ::littlstar::cfsnet::Request*>(
      ::littlstar::cfsnet::Request::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014cfsnet.proto\022\020littlstar.cfsnet\"D\n\nAcce"
      "ssFile\022\014\n\004path\030\001 \001(\t\022(\n\004mode\030\002 \001(\0162\032.lit"
      "tlstar.cfsnet.FileMode\"\023\n\005Close\022\n\n\002fd\030\001 "
      "\001(\r\"!\n\021DownloadDirectory\022\014\n\004path\030\001 \001(\t\"\034"
      "\n\014DownloadFile\022\014\n\004path\030\001 \001(\t\" \n\005Drive\022\n\n"
      "\002id\030\001 \001(\014\022\013\n\003key\030\002 \001(\014\"4\n\tHandshake\022\r\n\005n"
      "once\030\001 \001(\014\022\013\n\003key\030\002 \001(\014\022\013\n\003ack\030\003 \001(\010\"\035\n\r"
      "ListDirectory\022\014\n\004path\030\001 \001(\t\"\035\n\rMakeDirec"
      "tory\022\014\n\004path\030\001 \001(\t\"!\n\021MakeDirectoryPath\022"
      "\014\n\004path\030\001 \001(\t\"\024\n\004Open\022\014\n\004path\030\001 \001(\t\".\n\004R"
      "ead\022\n\n\002fd\030\001 \001(\r\022\r\n\005start\030\002 \001(\r\022\013\n\003end\030\003 "
      "\001(\r\"4\n\010ReadFile\022\014\n\004path\030\001 \001(\t\022\r\n\005start\030\002"
      " \001(\r\022\013\n\003end\030\003 \001(\r\"\037\n\017RemoveDirectory\022\014\n\004"
      "path\030\001 \001(\t\"#\n\023RemoveDirectoryPath\022\014\n\004pat"
      "h\030\001 \001(\t\"\200\001\n\007Request\022\r\n\005nonce\030\001 \001(\014\022&\n\005dr"
      "ive\030\002 \001(\0132\027.littlstar.cfsnet.Drive\022.\n\top"
      "eration\030\003 \001(\0162\033.littlstar.cfsnet.Operati"
      "on\022\016\n\006buffer\030\004 \001(\014\"\027\n\007Resolve\022\014\n\004path\030\001 "
      "\001(\t\"\335\001\n\010Response\022\r\n\005nonce\030\001 \001(\014\022&\n\005drive"
      "\030\002 \001(\0132\027.littlstar.cfsnet.Drive\022.\n\topera"
      "tion\030\003 \001(\0162\033.littlstar.cfsnet.Operation\022"
      "*\n\007request\030\004 \001(\0132\031.littlstar.cfsnet.Requ"
      "est\022.\n\terrorCode\030\005 \001(\0162\033.littlstar.cfsne"
      "t.ErrorCode\022\016\n\006buffer\030\006 \001(\014\"\216\001\n\004Stat\022\014\n\004"
      "mode\030\001 \001(\r\022\013\n\003uid\030\002 \001(\r\022\013\n\003gid\030\003 \001(\r\022\014\n\004"
      "size\030\004 \001(\004\022\016\n\006blocks\030\005 \001(\004\022\016\n\006offset\030\006 \001"
      "(\004\022\022\n\nbyteOffset\030\007 \001(\004\022\r\n\005mtime\030\010 \001(\004\022\r\n"
      "\005ctime\030\t \001(\004\"\030\n\010StatFile\022\014\n\004path\030\001 \001(\t\"\031"
      "\n\tTouchFile\022\014\n\004path\030\001 \001(\t\"\032\n\nUnlinkFile\022"
      "\014\n\004path\030\001 \001(\t\"E\n\tWriteFile\022\014\n\004path\030\001 \001(\t"
      "\022\016\n\006buffer\030\002 \001(\014\022\r\n\005start\030\003 \001(\r\022\013\n\003end\030\004"
      " \001(\r*2\n\010FileMode\022\010\n\004F_OK\020\000\022\010\n\004X_OK\020\001\022\010\n\004"
      "W_OK\020\002\022\010\n\004R_OK\020\004*q\n\tErrorCode\022\013\n\007NoError"
      "\020\000\022\026\n\021AccessDeniedError\020\223\003\022\022\n\rNotFoundEr"
      "ror\020\224\003\022\026\n\021NotSupportedError\020\225\003\022\023\n\016NotOpe"
      "nedError\020\232\003*\343\003\n\tOperation\022\017\n\013NoOperation"
      "\020\000\022\024\n\020ResolveOperation\020\001\022\021\n\rOpenOperatio"
      "n\020\002\022\022\n\016CloseOperation\020\003\022\021\n\rReadOperation"
      "\020\004\022\022\n\016WriteOperation\020\005\022\025\n\021ReadFileOperat"
      "ion\020\n\022\026\n\022WriteFileOperation\020\013\022\025\n\021StatFil"
      "eOperation\020\014\022\027\n\023UnlinkFileOperation\020\r\022\027\n"
      "\023AccessFileOperation\020\016\022\026\n\022TouchFileOpera"
      "tion\020\017\022\031\n\025DownloadFileOperation\020\020\022\036\n\032Dow"
      "nloadDirectoryOperation\020\024\022\032\n\026MakeDirecto"
      "ryOperation\020\025\022\036\n\032MakeDirectoryPathOperat"
      "ion\020\026\022\034\n\030RemoveDirectoryOperation\020\027\022 \n\034R"
      "emoveDirectoryPathOperation\020\030\022\032\n\026ListDir"
      "ectoryOperation\020\031BN\n\026com.littlstar.proto"
      "bufB\016CFSNetProtobufP\001\242\002\005CFSPB\252\002\031Littlsta"
      "r.CFSNet.Protobufb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1985);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cfsnet.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cfsnet_2eproto

const ::google::protobuf::EnumDescriptor* FileMode_descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_enum_descriptors[0];
}
bool FileMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_enum_descriptors[1];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 403:
    case 404:
    case 405:
    case 410:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Operation_descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_enum_descriptors[2];
}
bool Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessFile::kPathFieldNumber;
const int AccessFile::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessFile::AccessFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.AccessFile)
}
AccessFile::AccessFile(const AccessFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.AccessFile)
}

void AccessFile::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
  _cached_size_ = 0;
}

AccessFile::~AccessFile() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.AccessFile)
  SharedDtor();
}

void AccessFile::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccessFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessFile::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessFile& AccessFile::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccessFile* AccessFile::New(::google::protobuf::Arena* arena) const {
  AccessFile* n = new AccessFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccessFile::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.AccessFile)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
}

bool AccessFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.AccessFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "littlstar.cfsnet.AccessFile.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .littlstar.cfsnet.FileMode mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::littlstar::cfsnet::FileMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.AccessFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.AccessFile)
  return false;
#undef DO_
}

void AccessFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.AccessFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.AccessFile.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // .littlstar.cfsnet.FileMode mode = 2;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.AccessFile)
}

::google::protobuf::uint8* AccessFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.AccessFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.AccessFile.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // .littlstar.cfsnet.FileMode mode = 2;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.AccessFile)
  return target;
}

size_t AccessFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.AccessFile)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // .littlstar.cfsnet.FileMode mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.AccessFile)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.AccessFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.AccessFile)
    MergeFrom(*source);
  }
}

void AccessFile::MergeFrom(const AccessFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.AccessFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void AccessFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.AccessFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessFile::CopyFrom(const AccessFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.AccessFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessFile::IsInitialized() const {
  return true;
}

void AccessFile::Swap(AccessFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessFile::InternalSwap(AccessFile* other) {
  path_.Swap(&other->path_);
  std::swap(mode_, other->mode_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessFile::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccessFile

// string path = 1;
void AccessFile::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AccessFile::path() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.AccessFile.path)
  return path_.GetNoArena();
}
void AccessFile::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.AccessFile.path)
}
#if LANG_CXX11
void AccessFile::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.AccessFile.path)
}
#endif
void AccessFile::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.AccessFile.path)
}
void AccessFile::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.AccessFile.path)
}
::std::string* AccessFile::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.AccessFile.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AccessFile::release_path() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.AccessFile.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccessFile::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.AccessFile.path)
}

// .littlstar.cfsnet.FileMode mode = 2;
void AccessFile::clear_mode() {
  mode_ = 0;
}
::littlstar::cfsnet::FileMode AccessFile::mode() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.AccessFile.mode)
  return static_cast< ::littlstar::cfsnet::FileMode >(mode_);
}
void AccessFile::set_mode(::littlstar::cfsnet::FileMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.AccessFile.mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Close::kFdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Close::Close()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.Close)
}
Close::Close(const Close& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fd_ = from.fd_;
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.Close)
}

void Close::SharedCtor() {
  fd_ = 0u;
  _cached_size_ = 0;
}

Close::~Close() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.Close)
  SharedDtor();
}

void Close::SharedDtor() {
}

void Close::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Close::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Close& Close::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

Close* Close::New(::google::protobuf::Arena* arena) const {
  Close* n = new Close;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Close::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.Close)
  fd_ = 0u;
}

bool Close::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.Close)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 fd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.Close)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.Close)
  return false;
#undef DO_
}

void Close::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.Close)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fd = 1;
  if (this->fd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fd(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.Close)
}

::google::protobuf::uint8* Close::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.Close)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fd = 1;
  if (this->fd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.Close)
  return target;
}

size_t Close::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.Close)
  size_t total_size = 0;

  // uint32 fd = 1;
  if (this->fd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Close::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.Close)
  GOOGLE_DCHECK_NE(&from, this);
  const Close* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Close>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.Close)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.Close)
    MergeFrom(*source);
  }
}

void Close::MergeFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.Close)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fd() != 0) {
    set_fd(from.fd());
  }
}

void Close::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.Close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Close::CopyFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.Close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Close::IsInitialized() const {
  return true;
}

void Close::Swap(Close* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Close::InternalSwap(Close* other) {
  std::swap(fd_, other->fd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Close::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Close

// uint32 fd = 1;
void Close::clear_fd() {
  fd_ = 0u;
}
::google::protobuf::uint32 Close::fd() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Close.fd)
  return fd_;
}
void Close::set_fd(::google::protobuf::uint32 value) {
  
  fd_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Close.fd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownloadDirectory::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownloadDirectory::DownloadDirectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.DownloadDirectory)
}
DownloadDirectory::DownloadDirectory(const DownloadDirectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.DownloadDirectory)
}

void DownloadDirectory::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DownloadDirectory::~DownloadDirectory() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.DownloadDirectory)
  SharedDtor();
}

void DownloadDirectory::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DownloadDirectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadDirectory::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DownloadDirectory& DownloadDirectory::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

DownloadDirectory* DownloadDirectory::New(::google::protobuf::Arena* arena) const {
  DownloadDirectory* n = new DownloadDirectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownloadDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.DownloadDirectory)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DownloadDirectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.DownloadDirectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "littlstar.cfsnet.DownloadDirectory.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.DownloadDirectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.DownloadDirectory)
  return false;
#undef DO_
}

void DownloadDirectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.DownloadDirectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.DownloadDirectory.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.DownloadDirectory)
}

::google::protobuf::uint8* DownloadDirectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.DownloadDirectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.DownloadDirectory.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.DownloadDirectory)
  return target;
}

size_t DownloadDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.DownloadDirectory)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadDirectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.DownloadDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadDirectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DownloadDirectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.DownloadDirectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.DownloadDirectory)
    MergeFrom(*source);
  }
}

void DownloadDirectory::MergeFrom(const DownloadDirectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.DownloadDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void DownloadDirectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.DownloadDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadDirectory::CopyFrom(const DownloadDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.DownloadDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadDirectory::IsInitialized() const {
  return true;
}

void DownloadDirectory::Swap(DownloadDirectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownloadDirectory::InternalSwap(DownloadDirectory* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownloadDirectory::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownloadDirectory

// string path = 1;
void DownloadDirectory::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DownloadDirectory::path() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.DownloadDirectory.path)
  return path_.GetNoArena();
}
void DownloadDirectory::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.DownloadDirectory.path)
}
#if LANG_CXX11
void DownloadDirectory::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.DownloadDirectory.path)
}
#endif
void DownloadDirectory::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.DownloadDirectory.path)
}
void DownloadDirectory::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.DownloadDirectory.path)
}
::std::string* DownloadDirectory::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.DownloadDirectory.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DownloadDirectory::release_path() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.DownloadDirectory.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadDirectory::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.DownloadDirectory.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownloadFile::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownloadFile::DownloadFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.DownloadFile)
}
DownloadFile::DownloadFile(const DownloadFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.DownloadFile)
}

void DownloadFile::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DownloadFile::~DownloadFile() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.DownloadFile)
  SharedDtor();
}

void DownloadFile::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DownloadFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadFile::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DownloadFile& DownloadFile::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

DownloadFile* DownloadFile::New(::google::protobuf::Arena* arena) const {
  DownloadFile* n = new DownloadFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownloadFile::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.DownloadFile)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DownloadFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.DownloadFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "littlstar.cfsnet.DownloadFile.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.DownloadFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.DownloadFile)
  return false;
#undef DO_
}

void DownloadFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.DownloadFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.DownloadFile.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.DownloadFile)
}

::google::protobuf::uint8* DownloadFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.DownloadFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.DownloadFile.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.DownloadFile)
  return target;
}

size_t DownloadFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.DownloadFile)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.DownloadFile)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DownloadFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.DownloadFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.DownloadFile)
    MergeFrom(*source);
  }
}

void DownloadFile::MergeFrom(const DownloadFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.DownloadFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void DownloadFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.DownloadFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadFile::CopyFrom(const DownloadFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.DownloadFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadFile::IsInitialized() const {
  return true;
}

void DownloadFile::Swap(DownloadFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownloadFile::InternalSwap(DownloadFile* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownloadFile::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownloadFile

// string path = 1;
void DownloadFile::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DownloadFile::path() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.DownloadFile.path)
  return path_.GetNoArena();
}
void DownloadFile::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.DownloadFile.path)
}
#if LANG_CXX11
void DownloadFile::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.DownloadFile.path)
}
#endif
void DownloadFile::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.DownloadFile.path)
}
void DownloadFile::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.DownloadFile.path)
}
::std::string* DownloadFile::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.DownloadFile.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DownloadFile::release_path() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.DownloadFile.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadFile::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.DownloadFile.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Drive::kIdFieldNumber;
const int Drive::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Drive::Drive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.Drive)
}
Drive::Drive(const Drive& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.Drive)
}

void Drive::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Drive::~Drive() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.Drive)
  SharedDtor();
}

void Drive::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Drive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Drive::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Drive& Drive::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

Drive* Drive::New(::google::protobuf::Arena* arena) const {
  Drive* n = new Drive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Drive::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.Drive)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Drive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.Drive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.Drive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.Drive)
  return false;
#undef DO_
}

void Drive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.Drive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.Drive)
}

::google::protobuf::uint8* Drive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.Drive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.Drive)
  return target;
}

size_t Drive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.Drive)
  size_t total_size = 0;

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Drive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.Drive)
  GOOGLE_DCHECK_NE(&from, this);
  const Drive* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Drive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.Drive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.Drive)
    MergeFrom(*source);
  }
}

void Drive::MergeFrom(const Drive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.Drive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void Drive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.Drive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Drive::CopyFrom(const Drive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.Drive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Drive::IsInitialized() const {
  return true;
}

void Drive::Swap(Drive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Drive::InternalSwap(Drive* other) {
  id_.Swap(&other->id_);
  key_.Swap(&other->key_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Drive::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Drive

// bytes id = 1;
void Drive::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Drive::id() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Drive.id)
  return id_.GetNoArena();
}
void Drive::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Drive.id)
}
#if LANG_CXX11
void Drive::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.Drive.id)
}
#endif
void Drive::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.Drive.id)
}
void Drive::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.Drive.id)
}
::std::string* Drive::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.Drive.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Drive::release_id() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.Drive.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Drive::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.Drive.id)
}

// bytes key = 2;
void Drive::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Drive::key() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Drive.key)
  return key_.GetNoArena();
}
void Drive::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Drive.key)
}
#if LANG_CXX11
void Drive::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.Drive.key)
}
#endif
void Drive::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.Drive.key)
}
void Drive::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.Drive.key)
}
::std::string* Drive::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.Drive.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Drive::release_key() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.Drive.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Drive::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.Drive.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Handshake::kNonceFieldNumber;
const int Handshake::kKeyFieldNumber;
const int Handshake::kAckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Handshake::Handshake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.Handshake)
}
Handshake::Handshake(const Handshake& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nonce().size() > 0) {
    nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ack_ = from.ack_;
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.Handshake)
}

void Handshake::SharedCtor() {
  nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ack_ = false;
  _cached_size_ = 0;
}

Handshake::~Handshake() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.Handshake)
  SharedDtor();
}

void Handshake::SharedDtor() {
  nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Handshake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Handshake::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Handshake& Handshake::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

Handshake* Handshake::New(::google::protobuf::Arena* arena) const {
  Handshake* n = new Handshake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Handshake::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.Handshake)
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ack_ = false;
}

bool Handshake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.Handshake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes nonce = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nonce()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ack = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.Handshake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.Handshake)
  return false;
#undef DO_
}

void Handshake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.Handshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nonce = 1;
  if (this->nonce().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->nonce(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // bool ack = 3;
  if (this->ack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ack(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.Handshake)
}

::google::protobuf::uint8* Handshake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.Handshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nonce = 1;
  if (this->nonce().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->nonce(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // bool ack = 3;
  if (this->ack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ack(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.Handshake)
  return target;
}

size_t Handshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.Handshake)
  size_t total_size = 0;

  // bytes nonce = 1;
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nonce());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bool ack = 3;
  if (this->ack() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Handshake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  const Handshake* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Handshake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.Handshake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.Handshake)
    MergeFrom(*source);
  }
}

void Handshake::MergeFrom(const Handshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nonce().size() > 0) {

    nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.ack() != 0) {
    set_ack(from.ack());
  }
}

void Handshake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Handshake::CopyFrom(const Handshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handshake::IsInitialized() const {
  return true;
}

void Handshake::Swap(Handshake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Handshake::InternalSwap(Handshake* other) {
  nonce_.Swap(&other->nonce_);
  key_.Swap(&other->key_);
  std::swap(ack_, other->ack_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Handshake::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Handshake

// bytes nonce = 1;
void Handshake::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Handshake::nonce() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Handshake.nonce)
  return nonce_.GetNoArena();
}
void Handshake::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Handshake.nonce)
}
#if LANG_CXX11
void Handshake::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.Handshake.nonce)
}
#endif
void Handshake::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.Handshake.nonce)
}
void Handshake::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.Handshake.nonce)
}
::std::string* Handshake::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.Handshake.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Handshake::release_nonce() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.Handshake.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Handshake::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.Handshake.nonce)
}

// bytes key = 2;
void Handshake::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Handshake::key() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Handshake.key)
  return key_.GetNoArena();
}
void Handshake::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Handshake.key)
}
#if LANG_CXX11
void Handshake::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.Handshake.key)
}
#endif
void Handshake::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.Handshake.key)
}
void Handshake::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.Handshake.key)
}
::std::string* Handshake::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.Handshake.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Handshake::release_key() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.Handshake.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Handshake::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.Handshake.key)
}

// bool ack = 3;
void Handshake::clear_ack() {
  ack_ = false;
}
bool Handshake::ack() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Handshake.ack)
  return ack_;
}
void Handshake::set_ack(bool value) {
  
  ack_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Handshake.ack)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDirectory::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDirectory::ListDirectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.ListDirectory)
}
ListDirectory::ListDirectory(const ListDirectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.ListDirectory)
}

void ListDirectory::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListDirectory::~ListDirectory() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.ListDirectory)
  SharedDtor();
}

void ListDirectory::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListDirectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDirectory::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListDirectory& ListDirectory::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListDirectory* ListDirectory::New(::google::protobuf::Arena* arena) const {
  ListDirectory* n = new ListDirectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.ListDirectory)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListDirectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.ListDirectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "littlstar.cfsnet.ListDirectory.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.ListDirectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.ListDirectory)
  return false;
#undef DO_
}

void ListDirectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.ListDirectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.ListDirectory.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.ListDirectory)
}

::google::protobuf::uint8* ListDirectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.ListDirectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.ListDirectory.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.ListDirectory)
  return target;
}

size_t ListDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.ListDirectory)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDirectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.ListDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDirectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListDirectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.ListDirectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.ListDirectory)
    MergeFrom(*source);
  }
}

void ListDirectory::MergeFrom(const ListDirectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.ListDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void ListDirectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.ListDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDirectory::CopyFrom(const ListDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.ListDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDirectory::IsInitialized() const {
  return true;
}

void ListDirectory::Swap(ListDirectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListDirectory::InternalSwap(ListDirectory* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListDirectory::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListDirectory

// string path = 1;
void ListDirectory::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListDirectory::path() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.ListDirectory.path)
  return path_.GetNoArena();
}
void ListDirectory::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.ListDirectory.path)
}
#if LANG_CXX11
void ListDirectory::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.ListDirectory.path)
}
#endif
void ListDirectory::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.ListDirectory.path)
}
void ListDirectory::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.ListDirectory.path)
}
::std::string* ListDirectory::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.ListDirectory.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListDirectory::release_path() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.ListDirectory.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListDirectory::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.ListDirectory.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MakeDirectory::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MakeDirectory::MakeDirectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.MakeDirectory)
}
MakeDirectory::MakeDirectory(const MakeDirectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.MakeDirectory)
}

void MakeDirectory::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MakeDirectory::~MakeDirectory() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.MakeDirectory)
  SharedDtor();
}

void MakeDirectory::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MakeDirectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakeDirectory::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MakeDirectory& MakeDirectory::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

MakeDirectory* MakeDirectory::New(::google::protobuf::Arena* arena) const {
  MakeDirectory* n = new MakeDirectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MakeDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.MakeDirectory)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MakeDirectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.MakeDirectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "littlstar.cfsnet.MakeDirectory.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.MakeDirectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.MakeDirectory)
  return false;
#undef DO_
}

void MakeDirectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.MakeDirectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.MakeDirectory.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.MakeDirectory)
}

::google::protobuf::uint8* MakeDirectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.MakeDirectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.MakeDirectory.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.MakeDirectory)
  return target;
}

size_t MakeDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.MakeDirectory)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakeDirectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.MakeDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  const MakeDirectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MakeDirectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.MakeDirectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.MakeDirectory)
    MergeFrom(*source);
  }
}

void MakeDirectory::MergeFrom(const MakeDirectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.MakeDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void MakeDirectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.MakeDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeDirectory::CopyFrom(const MakeDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.MakeDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeDirectory::IsInitialized() const {
  return true;
}

void MakeDirectory::Swap(MakeDirectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MakeDirectory::InternalSwap(MakeDirectory* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MakeDirectory::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MakeDirectory

// string path = 1;
void MakeDirectory::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MakeDirectory::path() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.MakeDirectory.path)
  return path_.GetNoArena();
}
void MakeDirectory::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.MakeDirectory.path)
}
#if LANG_CXX11
void MakeDirectory::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.MakeDirectory.path)
}
#endif
void MakeDirectory::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.MakeDirectory.path)
}
void MakeDirectory::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.MakeDirectory.path)
}
::std::string* MakeDirectory::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.MakeDirectory.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MakeDirectory::release_path() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.MakeDirectory.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MakeDirectory::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.MakeDirectory.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MakeDirectoryPath::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MakeDirectoryPath::MakeDirectoryPath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.MakeDirectoryPath)
}
MakeDirectoryPath::MakeDirectoryPath(const MakeDirectoryPath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.MakeDirectoryPath)
}

void MakeDirectoryPath::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MakeDirectoryPath::~MakeDirectoryPath() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.MakeDirectoryPath)
  SharedDtor();
}

void MakeDirectoryPath::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MakeDirectoryPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakeDirectoryPath::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MakeDirectoryPath& MakeDirectoryPath::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

MakeDirectoryPath* MakeDirectoryPath::New(::google::protobuf::Arena* arena) const {
  MakeDirectoryPath* n = new MakeDirectoryPath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MakeDirectoryPath::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.MakeDirectoryPath)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MakeDirectoryPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.MakeDirectoryPath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "littlstar.cfsnet.MakeDirectoryPath.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.MakeDirectoryPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.MakeDirectoryPath)
  return false;
#undef DO_
}

void MakeDirectoryPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.MakeDirectoryPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.MakeDirectoryPath.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.MakeDirectoryPath)
}

::google::protobuf::uint8* MakeDirectoryPath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.MakeDirectoryPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.MakeDirectoryPath.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.MakeDirectoryPath)
  return target;
}

size_t MakeDirectoryPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.MakeDirectoryPath)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakeDirectoryPath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.MakeDirectoryPath)
  GOOGLE_DCHECK_NE(&from, this);
  const MakeDirectoryPath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MakeDirectoryPath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.MakeDirectoryPath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.MakeDirectoryPath)
    MergeFrom(*source);
  }
}

void MakeDirectoryPath::MergeFrom(const MakeDirectoryPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.MakeDirectoryPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void MakeDirectoryPath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.MakeDirectoryPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeDirectoryPath::CopyFrom(const MakeDirectoryPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.MakeDirectoryPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeDirectoryPath::IsInitialized() const {
  return true;
}

void MakeDirectoryPath::Swap(MakeDirectoryPath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MakeDirectoryPath::InternalSwap(MakeDirectoryPath* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MakeDirectoryPath::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MakeDirectoryPath

// string path = 1;
void MakeDirectoryPath::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MakeDirectoryPath::path() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.MakeDirectoryPath.path)
  return path_.GetNoArena();
}
void MakeDirectoryPath::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.MakeDirectoryPath.path)
}
#if LANG_CXX11
void MakeDirectoryPath::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.MakeDirectoryPath.path)
}
#endif
void MakeDirectoryPath::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.MakeDirectoryPath.path)
}
void MakeDirectoryPath::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.MakeDirectoryPath.path)
}
::std::string* MakeDirectoryPath::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.MakeDirectoryPath.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MakeDirectoryPath::release_path() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.MakeDirectoryPath.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MakeDirectoryPath::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.MakeDirectoryPath.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Open::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Open::Open()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.Open)
}
Open::Open(const Open& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.Open)
}

void Open::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Open::~Open() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.Open)
  SharedDtor();
}

void Open::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Open::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Open::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Open& Open::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

Open* Open::New(::google::protobuf::Arena* arena) const {
  Open* n = new Open;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Open::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.Open)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Open::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.Open)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "littlstar.cfsnet.Open.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.Open)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.Open)
  return false;
#undef DO_
}

void Open::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.Open)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.Open.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.Open)
}

::google::protobuf::uint8* Open::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.Open)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.Open.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.Open)
  return target;
}

size_t Open::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.Open)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Open::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.Open)
  GOOGLE_DCHECK_NE(&from, this);
  const Open* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Open>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.Open)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.Open)
    MergeFrom(*source);
  }
}

void Open::MergeFrom(const Open& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.Open)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void Open::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.Open)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Open::CopyFrom(const Open& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.Open)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Open::IsInitialized() const {
  return true;
}

void Open::Swap(Open* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Open::InternalSwap(Open* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Open::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Open

// string path = 1;
void Open::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Open::path() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Open.path)
  return path_.GetNoArena();
}
void Open::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Open.path)
}
#if LANG_CXX11
void Open::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.Open.path)
}
#endif
void Open::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.Open.path)
}
void Open::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.Open.path)
}
::std::string* Open::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.Open.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Open::release_path() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.Open.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Open::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.Open.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Read::kFdFieldNumber;
const int Read::kStartFieldNumber;
const int Read::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Read::Read()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.Read)
}
Read::Read(const Read& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fd_, &from.fd_,
    reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&fd_) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.Read)
}

void Read::SharedCtor() {
  ::memset(&fd_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&fd_) + sizeof(end_));
  _cached_size_ = 0;
}

Read::~Read() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.Read)
  SharedDtor();
}

void Read::SharedDtor() {
}

void Read::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Read::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Read& Read::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

Read* Read::New(::google::protobuf::Arena* arena) const {
  Read* n = new Read;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Read::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.Read)
  ::memset(&fd_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&fd_) + sizeof(end_));
}

bool Read::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.Read)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 fd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.Read)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.Read)
  return false;
#undef DO_
}

void Read::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.Read)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fd = 1;
  if (this->fd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fd(), output);
  }

  // uint32 start = 2;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start(), output);
  }

  // uint32 end = 3;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.Read)
}

::google::protobuf::uint8* Read::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.Read)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fd = 1;
  if (this->fd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fd(), target);
  }

  // uint32 start = 2;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start(), target);
  }

  // uint32 end = 3;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.Read)
  return target;
}

size_t Read::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.Read)
  size_t total_size = 0;

  // uint32 fd = 1;
  if (this->fd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fd());
  }

  // uint32 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start());
  }

  // uint32 end = 3;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Read::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.Read)
  GOOGLE_DCHECK_NE(&from, this);
  const Read* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Read>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.Read)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.Read)
    MergeFrom(*source);
  }
}

void Read::MergeFrom(const Read& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.Read)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fd() != 0) {
    set_fd(from.fd());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void Read::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.Read)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Read::CopyFrom(const Read& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.Read)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Read::IsInitialized() const {
  return true;
}

void Read::Swap(Read* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Read::InternalSwap(Read* other) {
  std::swap(fd_, other->fd_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Read::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Read

// uint32 fd = 1;
void Read::clear_fd() {
  fd_ = 0u;
}
::google::protobuf::uint32 Read::fd() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Read.fd)
  return fd_;
}
void Read::set_fd(::google::protobuf::uint32 value) {
  
  fd_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Read.fd)
}

// uint32 start = 2;
void Read::clear_start() {
  start_ = 0u;
}
::google::protobuf::uint32 Read::start() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Read.start)
  return start_;
}
void Read::set_start(::google::protobuf::uint32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Read.start)
}

// uint32 end = 3;
void Read::clear_end() {
  end_ = 0u;
}
::google::protobuf::uint32 Read::end() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Read.end)
  return end_;
}
void Read::set_end(::google::protobuf::uint32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Read.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadFile::kPathFieldNumber;
const int ReadFile::kStartFieldNumber;
const int ReadFile::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadFile::ReadFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.ReadFile)
}
ReadFile::ReadFile(const ReadFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  ::memcpy(&start_, &from.start_,
    reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.ReadFile)
}

void ReadFile::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
  _cached_size_ = 0;
}

ReadFile::~ReadFile() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.ReadFile)
  SharedDtor();
}

void ReadFile::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReadFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadFile::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadFile& ReadFile::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReadFile* ReadFile::New(::google::protobuf::Arena* arena) const {
  ReadFile* n = new ReadFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadFile::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.ReadFile)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
}

bool ReadFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.ReadFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "littlstar.cfsnet.ReadFile.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.ReadFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.ReadFile)
  return false;
#undef DO_
}

void ReadFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.ReadFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.ReadFile.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // uint32 start = 2;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start(), output);
  }

  // uint32 end = 3;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.ReadFile)
}

::google::protobuf::uint8* ReadFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.ReadFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.ReadFile.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // uint32 start = 2;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start(), target);
  }

  // uint32 end = 3;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.ReadFile)
  return target;
}

size_t ReadFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.ReadFile)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // uint32 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start());
  }

  // uint32 end = 3;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.ReadFile)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.ReadFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.ReadFile)
    MergeFrom(*source);
  }
}

void ReadFile::MergeFrom(const ReadFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.ReadFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void ReadFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.ReadFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadFile::CopyFrom(const ReadFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.ReadFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadFile::IsInitialized() const {
  return true;
}

void ReadFile::Swap(ReadFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadFile::InternalSwap(ReadFile* other) {
  path_.Swap(&other->path_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadFile::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadFile

// string path = 1;
void ReadFile::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReadFile::path() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.ReadFile.path)
  return path_.GetNoArena();
}
void ReadFile::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.ReadFile.path)
}
#if LANG_CXX11
void ReadFile::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.ReadFile.path)
}
#endif
void ReadFile::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.ReadFile.path)
}
void ReadFile::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.ReadFile.path)
}
::std::string* ReadFile::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.ReadFile.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReadFile::release_path() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.ReadFile.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadFile::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.ReadFile.path)
}

// uint32 start = 2;
void ReadFile::clear_start() {
  start_ = 0u;
}
::google::protobuf::uint32 ReadFile::start() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.ReadFile.start)
  return start_;
}
void ReadFile::set_start(::google::protobuf::uint32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.ReadFile.start)
}

// uint32 end = 3;
void ReadFile::clear_end() {
  end_ = 0u;
}
::google::protobuf::uint32 ReadFile::end() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.ReadFile.end)
  return end_;
}
void ReadFile::set_end(::google::protobuf::uint32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.ReadFile.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoveDirectory::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveDirectory::RemoveDirectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.RemoveDirectory)
}
RemoveDirectory::RemoveDirectory(const RemoveDirectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.RemoveDirectory)
}

void RemoveDirectory::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RemoveDirectory::~RemoveDirectory() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.RemoveDirectory)
  SharedDtor();
}

void RemoveDirectory::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemoveDirectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveDirectory::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoveDirectory& RemoveDirectory::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemoveDirectory* RemoveDirectory::New(::google::protobuf::Arena* arena) const {
  RemoveDirectory* n = new RemoveDirectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoveDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.RemoveDirectory)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RemoveDirectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.RemoveDirectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "littlstar.cfsnet.RemoveDirectory.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.RemoveDirectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.RemoveDirectory)
  return false;
#undef DO_
}

void RemoveDirectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.RemoveDirectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.RemoveDirectory.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.RemoveDirectory)
}

::google::protobuf::uint8* RemoveDirectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.RemoveDirectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.RemoveDirectory.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.RemoveDirectory)
  return target;
}

size_t RemoveDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.RemoveDirectory)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveDirectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.RemoveDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveDirectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoveDirectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.RemoveDirectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.RemoveDirectory)
    MergeFrom(*source);
  }
}

void RemoveDirectory::MergeFrom(const RemoveDirectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.RemoveDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void RemoveDirectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.RemoveDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveDirectory::CopyFrom(const RemoveDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.RemoveDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDirectory::IsInitialized() const {
  return true;
}

void RemoveDirectory::Swap(RemoveDirectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveDirectory::InternalSwap(RemoveDirectory* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemoveDirectory::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoveDirectory

// string path = 1;
void RemoveDirectory::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RemoveDirectory::path() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.RemoveDirectory.path)
  return path_.GetNoArena();
}
void RemoveDirectory::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.RemoveDirectory.path)
}
#if LANG_CXX11
void RemoveDirectory::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.RemoveDirectory.path)
}
#endif
void RemoveDirectory::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.RemoveDirectory.path)
}
void RemoveDirectory::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.RemoveDirectory.path)
}
::std::string* RemoveDirectory::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.RemoveDirectory.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoveDirectory::release_path() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.RemoveDirectory.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoveDirectory::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.RemoveDirectory.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoveDirectoryPath::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveDirectoryPath::RemoveDirectoryPath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.RemoveDirectoryPath)
}
RemoveDirectoryPath::RemoveDirectoryPath(const RemoveDirectoryPath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.RemoveDirectoryPath)
}

void RemoveDirectoryPath::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RemoveDirectoryPath::~RemoveDirectoryPath() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.RemoveDirectoryPath)
  SharedDtor();
}

void RemoveDirectoryPath::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemoveDirectoryPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveDirectoryPath::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoveDirectoryPath& RemoveDirectoryPath::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemoveDirectoryPath* RemoveDirectoryPath::New(::google::protobuf::Arena* arena) const {
  RemoveDirectoryPath* n = new RemoveDirectoryPath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoveDirectoryPath::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.RemoveDirectoryPath)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RemoveDirectoryPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.RemoveDirectoryPath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "littlstar.cfsnet.RemoveDirectoryPath.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.RemoveDirectoryPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.RemoveDirectoryPath)
  return false;
#undef DO_
}

void RemoveDirectoryPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.RemoveDirectoryPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.RemoveDirectoryPath.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.RemoveDirectoryPath)
}

::google::protobuf::uint8* RemoveDirectoryPath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.RemoveDirectoryPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.RemoveDirectoryPath.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.RemoveDirectoryPath)
  return target;
}

size_t RemoveDirectoryPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.RemoveDirectoryPath)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveDirectoryPath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.RemoveDirectoryPath)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveDirectoryPath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoveDirectoryPath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.RemoveDirectoryPath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.RemoveDirectoryPath)
    MergeFrom(*source);
  }
}

void RemoveDirectoryPath::MergeFrom(const RemoveDirectoryPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.RemoveDirectoryPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void RemoveDirectoryPath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.RemoveDirectoryPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveDirectoryPath::CopyFrom(const RemoveDirectoryPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.RemoveDirectoryPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDirectoryPath::IsInitialized() const {
  return true;
}

void RemoveDirectoryPath::Swap(RemoveDirectoryPath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveDirectoryPath::InternalSwap(RemoveDirectoryPath* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemoveDirectoryPath::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoveDirectoryPath

// string path = 1;
void RemoveDirectoryPath::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RemoveDirectoryPath::path() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.RemoveDirectoryPath.path)
  return path_.GetNoArena();
}
void RemoveDirectoryPath::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.RemoveDirectoryPath.path)
}
#if LANG_CXX11
void RemoveDirectoryPath::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.RemoveDirectoryPath.path)
}
#endif
void RemoveDirectoryPath::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.RemoveDirectoryPath.path)
}
void RemoveDirectoryPath::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.RemoveDirectoryPath.path)
}
::std::string* RemoveDirectoryPath::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.RemoveDirectoryPath.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoveDirectoryPath::release_path() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.RemoveDirectoryPath.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoveDirectoryPath::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.RemoveDirectoryPath.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kNonceFieldNumber;
const int Request::kDriveFieldNumber;
const int Request::kOperationFieldNumber;
const int Request::kBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nonce().size() > 0) {
    nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.buffer().size() > 0) {
    buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  if (from.has_drive()) {
    drive_ = new ::littlstar::cfsnet::Drive(*from.drive_);
  } else {
    drive_ = NULL;
  }
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.Request)
}

void Request::SharedCtor() {
  nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&drive_, 0, reinterpret_cast<char*>(&operation_) -
    reinterpret_cast<char*>(&drive_) + sizeof(operation_));
  _cached_size_ = 0;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete drive_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request& Request::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.Request)
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && drive_ != NULL) {
    delete drive_;
  }
  drive_ = NULL;
  operation_ = 0;
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes nonce = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nonce()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .littlstar.cfsnet.Drive drive = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .littlstar.cfsnet.Operation operation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation(static_cast< ::littlstar::cfsnet::Operation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes buffer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nonce = 1;
  if (this->nonce().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->nonce(), output);
  }

  // .littlstar.cfsnet.Drive drive = 2;
  if (this->has_drive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->drive_, output);
  }

  // .littlstar.cfsnet.Operation operation = 3;
  if (this->operation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operation(), output);
  }

  // bytes buffer = 4;
  if (this->buffer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->buffer(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nonce = 1;
  if (this->nonce().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->nonce(), target);
  }

  // .littlstar.cfsnet.Drive drive = 2;
  if (this->has_drive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->drive_, deterministic, target);
  }

  // .littlstar.cfsnet.Operation operation = 3;
  if (this->operation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operation(), target);
  }

  // bytes buffer = 4;
  if (this->buffer().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->buffer(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.Request)
  size_t total_size = 0;

  // bytes nonce = 1;
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nonce());
  }

  // bytes buffer = 4;
  if (this->buffer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buffer());
  }

  // .littlstar.cfsnet.Drive drive = 2;
  if (this->has_drive()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->drive_);
  }

  // .littlstar.cfsnet.Operation operation = 3;
  if (this->operation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nonce().size() > 0) {

    nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  if (from.buffer().size() > 0) {

    buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  if (from.has_drive()) {
    mutable_drive()->::littlstar::cfsnet::Drive::MergeFrom(from.drive());
  }
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  nonce_.Swap(&other->nonce_);
  buffer_.Swap(&other->buffer_);
  std::swap(drive_, other->drive_);
  std::swap(operation_, other->operation_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// bytes nonce = 1;
void Request::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Request::nonce() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Request.nonce)
  return nonce_.GetNoArena();
}
void Request::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Request.nonce)
}
#if LANG_CXX11
void Request::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.Request.nonce)
}
#endif
void Request::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.Request.nonce)
}
void Request::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.Request.nonce)
}
::std::string* Request::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.Request.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Request::release_nonce() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.Request.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.Request.nonce)
}

// .littlstar.cfsnet.Drive drive = 2;
bool Request::has_drive() const {
  return this != internal_default_instance() && drive_ != NULL;
}
void Request::clear_drive() {
  if (GetArenaNoVirtual() == NULL && drive_ != NULL) delete drive_;
  drive_ = NULL;
}
const ::littlstar::cfsnet::Drive& Request::drive() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Request.drive)
  return drive_ != NULL ? *drive_
                         : *::littlstar::cfsnet::Drive::internal_default_instance();
}
::littlstar::cfsnet::Drive* Request::mutable_drive() {
  
  if (drive_ == NULL) {
    drive_ = new ::littlstar::cfsnet::Drive;
  }
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.Request.drive)
  return drive_;
}
::littlstar::cfsnet::Drive* Request::release_drive() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.Request.drive)
  
  ::littlstar::cfsnet::Drive* temp = drive_;
  drive_ = NULL;
  return temp;
}
void Request::set_allocated_drive(::littlstar::cfsnet::Drive* drive) {
  delete drive_;
  drive_ = drive;
  if (drive) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.Request.drive)
}

// .littlstar.cfsnet.Operation operation = 3;
void Request::clear_operation() {
  operation_ = 0;
}
::littlstar::cfsnet::Operation Request::operation() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Request.operation)
  return static_cast< ::littlstar::cfsnet::Operation >(operation_);
}
void Request::set_operation(::littlstar::cfsnet::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Request.operation)
}

// bytes buffer = 4;
void Request::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Request::buffer() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Request.buffer)
  return buffer_.GetNoArena();
}
void Request::set_buffer(const ::std::string& value) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Request.buffer)
}
#if LANG_CXX11
void Request::set_buffer(::std::string&& value) {
  
  buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.Request.buffer)
}
#endif
void Request::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.Request.buffer)
}
void Request::set_buffer(const void* value, size_t size) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.Request.buffer)
}
::std::string* Request::mutable_buffer() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.Request.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Request::release_buffer() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.Request.buffer)
  
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    
  } else {
    
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.Request.buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Resolve::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Resolve::Resolve()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.Resolve)
}
Resolve::Resolve(const Resolve& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.Resolve)
}

void Resolve::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Resolve::~Resolve() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.Resolve)
  SharedDtor();
}

void Resolve::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Resolve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resolve::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Resolve& Resolve::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

Resolve* Resolve::New(::google::protobuf::Arena* arena) const {
  Resolve* n = new Resolve;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Resolve::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.Resolve)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Resolve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.Resolve)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "littlstar.cfsnet.Resolve.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.Resolve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.Resolve)
  return false;
#undef DO_
}

void Resolve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.Resolve)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.Resolve.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.Resolve)
}

::google::protobuf::uint8* Resolve::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.Resolve)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.Resolve.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.Resolve)
  return target;
}

size_t Resolve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.Resolve)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resolve::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.Resolve)
  GOOGLE_DCHECK_NE(&from, this);
  const Resolve* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Resolve>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.Resolve)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.Resolve)
    MergeFrom(*source);
  }
}

void Resolve::MergeFrom(const Resolve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.Resolve)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void Resolve::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.Resolve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resolve::CopyFrom(const Resolve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.Resolve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resolve::IsInitialized() const {
  return true;
}

void Resolve::Swap(Resolve* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Resolve::InternalSwap(Resolve* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Resolve::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Resolve

// string path = 1;
void Resolve::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Resolve::path() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Resolve.path)
  return path_.GetNoArena();
}
void Resolve::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Resolve.path)
}
#if LANG_CXX11
void Resolve::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.Resolve.path)
}
#endif
void Resolve::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.Resolve.path)
}
void Resolve::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.Resolve.path)
}
::std::string* Resolve::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.Resolve.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Resolve::release_path() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.Resolve.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Resolve::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.Resolve.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kNonceFieldNumber;
const int Response::kDriveFieldNumber;
const int Response::kOperationFieldNumber;
const int Response::kRequestFieldNumber;
const int Response::kErrorCodeFieldNumber;
const int Response::kBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nonce().size() > 0) {
    nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.buffer().size() > 0) {
    buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  if (from.has_drive()) {
    drive_ = new ::littlstar::cfsnet::Drive(*from.drive_);
  } else {
    drive_ = NULL;
  }
  if (from.has_request()) {
    request_ = new ::littlstar::cfsnet::Request(*from.request_);
  } else {
    request_ = NULL;
  }
  ::memcpy(&operation_, &from.operation_,
    reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&operation_) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.Response)
}

void Response::SharedCtor() {
  nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&drive_, 0, reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&drive_) + sizeof(errorcode_));
  _cached_size_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete drive_;
  }
  if (this != internal_default_instance()) {
    delete request_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Response& Response::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.Response)
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && drive_ != NULL) {
    delete drive_;
  }
  drive_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_ != NULL) {
    delete request_;
  }
  request_ = NULL;
  ::memset(&operation_, 0, reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&operation_) + sizeof(errorcode_));
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes nonce = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nonce()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .littlstar.cfsnet.Drive drive = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .littlstar.cfsnet.Operation operation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation(static_cast< ::littlstar::cfsnet::Operation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .littlstar.cfsnet.Request request = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .littlstar.cfsnet.ErrorCode errorCode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errorcode(static_cast< ::littlstar::cfsnet::ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes buffer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nonce = 1;
  if (this->nonce().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->nonce(), output);
  }

  // .littlstar.cfsnet.Drive drive = 2;
  if (this->has_drive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->drive_, output);
  }

  // .littlstar.cfsnet.Operation operation = 3;
  if (this->operation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operation(), output);
  }

  // .littlstar.cfsnet.Request request = 4;
  if (this->has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->request_, output);
  }

  // .littlstar.cfsnet.ErrorCode errorCode = 5;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->errorcode(), output);
  }

  // bytes buffer = 6;
  if (this->buffer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->buffer(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nonce = 1;
  if (this->nonce().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->nonce(), target);
  }

  // .littlstar.cfsnet.Drive drive = 2;
  if (this->has_drive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->drive_, deterministic, target);
  }

  // .littlstar.cfsnet.Operation operation = 3;
  if (this->operation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operation(), target);
  }

  // .littlstar.cfsnet.Request request = 4;
  if (this->has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->request_, deterministic, target);
  }

  // .littlstar.cfsnet.ErrorCode errorCode = 5;
  if (this->errorcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->errorcode(), target);
  }

  // bytes buffer = 6;
  if (this->buffer().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->buffer(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.Response)
  size_t total_size = 0;

  // bytes nonce = 1;
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nonce());
  }

  // bytes buffer = 6;
  if (this->buffer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buffer());
  }

  // .littlstar.cfsnet.Drive drive = 2;
  if (this->has_drive()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->drive_);
  }

  // .littlstar.cfsnet.Request request = 4;
  if (this->has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_);
  }

  // .littlstar.cfsnet.Operation operation = 3;
  if (this->operation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
  }

  // .littlstar.cfsnet.ErrorCode errorCode = 5;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errorcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nonce().size() > 0) {

    nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  if (from.buffer().size() > 0) {

    buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  if (from.has_drive()) {
    mutable_drive()->::littlstar::cfsnet::Drive::MergeFrom(from.drive());
  }
  if (from.has_request()) {
    mutable_request()->::littlstar::cfsnet::Request::MergeFrom(from.request());
  }
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  nonce_.Swap(&other->nonce_);
  buffer_.Swap(&other->buffer_);
  std::swap(drive_, other->drive_);
  std::swap(request_, other->request_);
  std::swap(operation_, other->operation_);
  std::swap(errorcode_, other->errorcode_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// bytes nonce = 1;
void Response::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Response::nonce() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Response.nonce)
  return nonce_.GetNoArena();
}
void Response::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Response.nonce)
}
#if LANG_CXX11
void Response::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.Response.nonce)
}
#endif
void Response::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.Response.nonce)
}
void Response::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.Response.nonce)
}
::std::string* Response::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.Response.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Response::release_nonce() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.Response.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Response::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.Response.nonce)
}

// .littlstar.cfsnet.Drive drive = 2;
bool Response::has_drive() const {
  return this != internal_default_instance() && drive_ != NULL;
}
void Response::clear_drive() {
  if (GetArenaNoVirtual() == NULL && drive_ != NULL) delete drive_;
  drive_ = NULL;
}
const ::littlstar::cfsnet::Drive& Response::drive() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Response.drive)
  return drive_ != NULL ? *drive_
                         : *::littlstar::cfsnet::Drive::internal_default_instance();
}
::littlstar::cfsnet::Drive* Response::mutable_drive() {
  
  if (drive_ == NULL) {
    drive_ = new ::littlstar::cfsnet::Drive;
  }
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.Response.drive)
  return drive_;
}
::littlstar::cfsnet::Drive* Response::release_drive() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.Response.drive)
  
  ::littlstar::cfsnet::Drive* temp = drive_;
  drive_ = NULL;
  return temp;
}
void Response::set_allocated_drive(::littlstar::cfsnet::Drive* drive) {
  delete drive_;
  drive_ = drive;
  if (drive) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.Response.drive)
}

// .littlstar.cfsnet.Operation operation = 3;
void Response::clear_operation() {
  operation_ = 0;
}
::littlstar::cfsnet::Operation Response::operation() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Response.operation)
  return static_cast< ::littlstar::cfsnet::Operation >(operation_);
}
void Response::set_operation(::littlstar::cfsnet::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Response.operation)
}

// .littlstar.cfsnet.Request request = 4;
bool Response::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
void Response::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
const ::littlstar::cfsnet::Request& Response::request() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Response.request)
  return request_ != NULL ? *request_
                         : *::littlstar::cfsnet::Request::internal_default_instance();
}
::littlstar::cfsnet::Request* Response::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::littlstar::cfsnet::Request;
  }
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.Response.request)
  return request_;
}
::littlstar::cfsnet::Request* Response::release_request() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.Response.request)
  
  ::littlstar::cfsnet::Request* temp = request_;
  request_ = NULL;
  return temp;
}
void Response::set_allocated_request(::littlstar::cfsnet::Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.Response.request)
}

// .littlstar.cfsnet.ErrorCode errorCode = 5;
void Response::clear_errorcode() {
  errorcode_ = 0;
}
::littlstar::cfsnet::ErrorCode Response::errorcode() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Response.errorCode)
  return static_cast< ::littlstar::cfsnet::ErrorCode >(errorcode_);
}
void Response::set_errorcode(::littlstar::cfsnet::ErrorCode value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Response.errorCode)
}

// bytes buffer = 6;
void Response::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Response::buffer() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Response.buffer)
  return buffer_.GetNoArena();
}
void Response::set_buffer(const ::std::string& value) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Response.buffer)
}
#if LANG_CXX11
void Response::set_buffer(::std::string&& value) {
  
  buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.Response.buffer)
}
#endif
void Response::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.Response.buffer)
}
void Response::set_buffer(const void* value, size_t size) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.Response.buffer)
}
::std::string* Response::mutable_buffer() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.Response.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Response::release_buffer() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.Response.buffer)
  
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Response::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    
  } else {
    
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.Response.buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stat::kModeFieldNumber;
const int Stat::kUidFieldNumber;
const int Stat::kGidFieldNumber;
const int Stat::kSizeFieldNumber;
const int Stat::kBlocksFieldNumber;
const int Stat::kOffsetFieldNumber;
const int Stat::kByteOffsetFieldNumber;
const int Stat::kMtimeFieldNumber;
const int Stat::kCtimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stat::Stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.Stat)
}
Stat::Stat(const Stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    reinterpret_cast<char*>(&gid_) -
    reinterpret_cast<char*>(&mode_) + sizeof(gid_));
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.Stat)
}

void Stat::SharedCtor() {
  ::memset(&mode_, 0, reinterpret_cast<char*>(&gid_) -
    reinterpret_cast<char*>(&mode_) + sizeof(gid_));
  _cached_size_ = 0;
}

Stat::~Stat() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.Stat)
  SharedDtor();
}

void Stat::SharedDtor() {
}

void Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stat::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stat& Stat::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

Stat* Stat::New(::google::protobuf::Arena* arena) const {
  Stat* n = new Stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.Stat)
  ::memset(&mode_, 0, reinterpret_cast<char*>(&gid_) -
    reinterpret_cast<char*>(&mode_) + sizeof(gid_));
}

bool Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.Stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 blocks = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blocks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 offset = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 byteOffset = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &byteoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 mtime = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ctime = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.Stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.Stat)
  return false;
#undef DO_
}

void Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mode = 1;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mode(), output);
  }

  // uint32 uid = 2;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // uint32 gid = 3;
  if (this->gid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gid(), output);
  }

  // uint64 size = 4;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->size(), output);
  }

  // uint64 blocks = 5;
  if (this->blocks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->blocks(), output);
  }

  // uint64 offset = 6;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->offset(), output);
  }

  // uint64 byteOffset = 7;
  if (this->byteoffset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->byteoffset(), output);
  }

  // uint64 mtime = 8;
  if (this->mtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->mtime(), output);
  }

  // uint64 ctime = 9;
  if (this->ctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->ctime(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.Stat)
}

::google::protobuf::uint8* Stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mode = 1;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mode(), target);
  }

  // uint32 uid = 2;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // uint32 gid = 3;
  if (this->gid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gid(), target);
  }

  // uint64 size = 4;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->size(), target);
  }

  // uint64 blocks = 5;
  if (this->blocks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->blocks(), target);
  }

  // uint64 offset = 6;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->offset(), target);
  }

  // uint64 byteOffset = 7;
  if (this->byteoffset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->byteoffset(), target);
  }

  // uint64 mtime = 8;
  if (this->mtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->mtime(), target);
  }

  // uint64 ctime = 9;
  if (this->ctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->ctime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.Stat)
  return target;
}

size_t Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.Stat)
  size_t total_size = 0;

  // uint32 mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mode());
  }

  // uint32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // uint64 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  // uint64 blocks = 5;
  if (this->blocks() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->blocks());
  }

  // uint64 offset = 6;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());
  }

  // uint64 byteOffset = 7;
  if (this->byteoffset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->byteoffset());
  }

  // uint64 mtime = 8;
  if (this->mtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mtime());
  }

  // uint64 ctime = 9;
  if (this->ctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ctime());
  }

  // uint32 gid = 3;
  if (this->gid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  const Stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.Stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.Stat)
    MergeFrom(*source);
  }
}

void Stat::MergeFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.blocks() != 0) {
    set_blocks(from.blocks());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.byteoffset() != 0) {
    set_byteoffset(from.byteoffset());
  }
  if (from.mtime() != 0) {
    set_mtime(from.mtime());
  }
  if (from.ctime() != 0) {
    set_ctime(from.ctime());
  }
  if (from.gid() != 0) {
    set_gid(from.gid());
  }
}

void Stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stat::CopyFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stat::IsInitialized() const {
  return true;
}

void Stat::Swap(Stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stat::InternalSwap(Stat* other) {
  std::swap(mode_, other->mode_);
  std::swap(uid_, other->uid_);
  std::swap(size_, other->size_);
  std::swap(blocks_, other->blocks_);
  std::swap(offset_, other->offset_);
  std::swap(byteoffset_, other->byteoffset_);
  std::swap(mtime_, other->mtime_);
  std::swap(ctime_, other->ctime_);
  std::swap(gid_, other->gid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stat::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stat

// uint32 mode = 1;
void Stat::clear_mode() {
  mode_ = 0u;
}
::google::protobuf::uint32 Stat::mode() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Stat.mode)
  return mode_;
}
void Stat::set_mode(::google::protobuf::uint32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Stat.mode)
}

// uint32 uid = 2;
void Stat::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 Stat::uid() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Stat.uid)
  return uid_;
}
void Stat::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Stat.uid)
}

// uint32 gid = 3;
void Stat::clear_gid() {
  gid_ = 0u;
}
::google::protobuf::uint32 Stat::gid() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Stat.gid)
  return gid_;
}
void Stat::set_gid(::google::protobuf::uint32 value) {
  
  gid_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Stat.gid)
}

// uint64 size = 4;
void Stat::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Stat::size() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Stat.size)
  return size_;
}
void Stat::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Stat.size)
}

// uint64 blocks = 5;
void Stat::clear_blocks() {
  blocks_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Stat::blocks() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Stat.blocks)
  return blocks_;
}
void Stat::set_blocks(::google::protobuf::uint64 value) {
  
  blocks_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Stat.blocks)
}

// uint64 offset = 6;
void Stat::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Stat::offset() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Stat.offset)
  return offset_;
}
void Stat::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Stat.offset)
}

// uint64 byteOffset = 7;
void Stat::clear_byteoffset() {
  byteoffset_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Stat::byteoffset() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Stat.byteOffset)
  return byteoffset_;
}
void Stat::set_byteoffset(::google::protobuf::uint64 value) {
  
  byteoffset_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Stat.byteOffset)
}

// uint64 mtime = 8;
void Stat::clear_mtime() {
  mtime_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Stat::mtime() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Stat.mtime)
  return mtime_;
}
void Stat::set_mtime(::google::protobuf::uint64 value) {
  
  mtime_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Stat.mtime)
}

// uint64 ctime = 9;
void Stat::clear_ctime() {
  ctime_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Stat::ctime() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.Stat.ctime)
  return ctime_;
}
void Stat::set_ctime(::google::protobuf::uint64 value) {
  
  ctime_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.Stat.ctime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatFile::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatFile::StatFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.StatFile)
}
StatFile::StatFile(const StatFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.StatFile)
}

void StatFile::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StatFile::~StatFile() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.StatFile)
  SharedDtor();
}

void StatFile::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StatFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatFile::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatFile& StatFile::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

StatFile* StatFile::New(::google::protobuf::Arena* arena) const {
  StatFile* n = new StatFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatFile::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.StatFile)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StatFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.StatFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "littlstar.cfsnet.StatFile.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.StatFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.StatFile)
  return false;
#undef DO_
}

void StatFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.StatFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.StatFile.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.StatFile)
}

::google::protobuf::uint8* StatFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.StatFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.StatFile.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.StatFile)
  return target;
}

size_t StatFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.StatFile)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.StatFile)
  GOOGLE_DCHECK_NE(&from, this);
  const StatFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.StatFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.StatFile)
    MergeFrom(*source);
  }
}

void StatFile::MergeFrom(const StatFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.StatFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void StatFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.StatFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatFile::CopyFrom(const StatFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.StatFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatFile::IsInitialized() const {
  return true;
}

void StatFile::Swap(StatFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatFile::InternalSwap(StatFile* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatFile::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatFile

// string path = 1;
void StatFile::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StatFile::path() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.StatFile.path)
  return path_.GetNoArena();
}
void StatFile::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.StatFile.path)
}
#if LANG_CXX11
void StatFile::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.StatFile.path)
}
#endif
void StatFile::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.StatFile.path)
}
void StatFile::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.StatFile.path)
}
::std::string* StatFile::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.StatFile.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StatFile::release_path() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.StatFile.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StatFile::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.StatFile.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TouchFile::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TouchFile::TouchFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.TouchFile)
}
TouchFile::TouchFile(const TouchFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.TouchFile)
}

void TouchFile::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TouchFile::~TouchFile() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.TouchFile)
  SharedDtor();
}

void TouchFile::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TouchFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TouchFile::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TouchFile& TouchFile::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

TouchFile* TouchFile::New(::google::protobuf::Arena* arena) const {
  TouchFile* n = new TouchFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TouchFile::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.TouchFile)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TouchFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.TouchFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "littlstar.cfsnet.TouchFile.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.TouchFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.TouchFile)
  return false;
#undef DO_
}

void TouchFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.TouchFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.TouchFile.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.TouchFile)
}

::google::protobuf::uint8* TouchFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.TouchFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.TouchFile.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.TouchFile)
  return target;
}

size_t TouchFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.TouchFile)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TouchFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.TouchFile)
  GOOGLE_DCHECK_NE(&from, this);
  const TouchFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TouchFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.TouchFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.TouchFile)
    MergeFrom(*source);
  }
}

void TouchFile::MergeFrom(const TouchFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.TouchFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void TouchFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.TouchFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TouchFile::CopyFrom(const TouchFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.TouchFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchFile::IsInitialized() const {
  return true;
}

void TouchFile::Swap(TouchFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TouchFile::InternalSwap(TouchFile* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TouchFile::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TouchFile

// string path = 1;
void TouchFile::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TouchFile::path() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.TouchFile.path)
  return path_.GetNoArena();
}
void TouchFile::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.TouchFile.path)
}
#if LANG_CXX11
void TouchFile::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.TouchFile.path)
}
#endif
void TouchFile::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.TouchFile.path)
}
void TouchFile::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.TouchFile.path)
}
::std::string* TouchFile::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.TouchFile.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TouchFile::release_path() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.TouchFile.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TouchFile::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.TouchFile.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnlinkFile::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnlinkFile::UnlinkFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.UnlinkFile)
}
UnlinkFile::UnlinkFile(const UnlinkFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.UnlinkFile)
}

void UnlinkFile::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UnlinkFile::~UnlinkFile() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.UnlinkFile)
  SharedDtor();
}

void UnlinkFile::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UnlinkFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlinkFile::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnlinkFile& UnlinkFile::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnlinkFile* UnlinkFile::New(::google::protobuf::Arena* arena) const {
  UnlinkFile* n = new UnlinkFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnlinkFile::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.UnlinkFile)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UnlinkFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.UnlinkFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "littlstar.cfsnet.UnlinkFile.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.UnlinkFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.UnlinkFile)
  return false;
#undef DO_
}

void UnlinkFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.UnlinkFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.UnlinkFile.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.UnlinkFile)
}

::google::protobuf::uint8* UnlinkFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.UnlinkFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.UnlinkFile.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.UnlinkFile)
  return target;
}

size_t UnlinkFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.UnlinkFile)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlinkFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.UnlinkFile)
  GOOGLE_DCHECK_NE(&from, this);
  const UnlinkFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnlinkFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.UnlinkFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.UnlinkFile)
    MergeFrom(*source);
  }
}

void UnlinkFile::MergeFrom(const UnlinkFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.UnlinkFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void UnlinkFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.UnlinkFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlinkFile::CopyFrom(const UnlinkFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.UnlinkFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlinkFile::IsInitialized() const {
  return true;
}

void UnlinkFile::Swap(UnlinkFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnlinkFile::InternalSwap(UnlinkFile* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnlinkFile::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnlinkFile

// string path = 1;
void UnlinkFile::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UnlinkFile::path() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.UnlinkFile.path)
  return path_.GetNoArena();
}
void UnlinkFile::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.UnlinkFile.path)
}
#if LANG_CXX11
void UnlinkFile::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.UnlinkFile.path)
}
#endif
void UnlinkFile::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.UnlinkFile.path)
}
void UnlinkFile::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.UnlinkFile.path)
}
::std::string* UnlinkFile::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.UnlinkFile.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnlinkFile::release_path() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.UnlinkFile.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnlinkFile::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.UnlinkFile.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteFile::kPathFieldNumber;
const int WriteFile::kBufferFieldNumber;
const int WriteFile::kStartFieldNumber;
const int WriteFile::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteFile::WriteFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cfsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:littlstar.cfsnet.WriteFile)
}
WriteFile::WriteFile(const WriteFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.buffer().size() > 0) {
    buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  ::memcpy(&start_, &from.start_,
    reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:littlstar.cfsnet.WriteFile)
}

void WriteFile::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
  _cached_size_ = 0;
}

WriteFile::~WriteFile() {
  // @@protoc_insertion_point(destructor:littlstar.cfsnet.WriteFile)
  SharedDtor();
}

void WriteFile::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WriteFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteFile::descriptor() {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteFile& WriteFile::default_instance() {
  protobuf_cfsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

WriteFile* WriteFile::New(::google::protobuf::Arena* arena) const {
  WriteFile* n = new WriteFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WriteFile::Clear() {
// @@protoc_insertion_point(message_clear_start:littlstar.cfsnet.WriteFile)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
}

bool WriteFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:littlstar.cfsnet.WriteFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "littlstar.cfsnet.WriteFile.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes buffer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:littlstar.cfsnet.WriteFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:littlstar.cfsnet.WriteFile)
  return false;
#undef DO_
}

void WriteFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:littlstar.cfsnet.WriteFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.WriteFile.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // bytes buffer = 2;
  if (this->buffer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->buffer(), output);
  }

  // uint32 start = 3;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start(), output);
  }

  // uint32 end = 4;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end(), output);
  }

  // @@protoc_insertion_point(serialize_end:littlstar.cfsnet.WriteFile)
}

::google::protobuf::uint8* WriteFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:littlstar.cfsnet.WriteFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "littlstar.cfsnet.WriteFile.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // bytes buffer = 2;
  if (this->buffer().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->buffer(), target);
  }

  // uint32 start = 3;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start(), target);
  }

  // uint32 end = 4;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:littlstar.cfsnet.WriteFile)
  return target;
}

size_t WriteFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:littlstar.cfsnet.WriteFile)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // bytes buffer = 2;
  if (this->buffer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buffer());
  }

  // uint32 start = 3;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start());
  }

  // uint32 end = 4;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:littlstar.cfsnet.WriteFile)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:littlstar.cfsnet.WriteFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:littlstar.cfsnet.WriteFile)
    MergeFrom(*source);
  }
}

void WriteFile::MergeFrom(const WriteFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:littlstar.cfsnet.WriteFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.buffer().size() > 0) {

    buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void WriteFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:littlstar.cfsnet.WriteFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteFile::CopyFrom(const WriteFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:littlstar.cfsnet.WriteFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteFile::IsInitialized() const {
  return true;
}

void WriteFile::Swap(WriteFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteFile::InternalSwap(WriteFile* other) {
  path_.Swap(&other->path_);
  buffer_.Swap(&other->buffer_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WriteFile::GetMetadata() const {
  protobuf_cfsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cfsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WriteFile

// string path = 1;
void WriteFile::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WriteFile::path() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.WriteFile.path)
  return path_.GetNoArena();
}
void WriteFile::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.WriteFile.path)
}
#if LANG_CXX11
void WriteFile::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.WriteFile.path)
}
#endif
void WriteFile::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.WriteFile.path)
}
void WriteFile::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.WriteFile.path)
}
::std::string* WriteFile::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.WriteFile.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WriteFile::release_path() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.WriteFile.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WriteFile::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.WriteFile.path)
}

// bytes buffer = 2;
void WriteFile::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WriteFile::buffer() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.WriteFile.buffer)
  return buffer_.GetNoArena();
}
void WriteFile::set_buffer(const ::std::string& value) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.WriteFile.buffer)
}
#if LANG_CXX11
void WriteFile::set_buffer(::std::string&& value) {
  
  buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:littlstar.cfsnet.WriteFile.buffer)
}
#endif
void WriteFile::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:littlstar.cfsnet.WriteFile.buffer)
}
void WriteFile::set_buffer(const void* value, size_t size) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:littlstar.cfsnet.WriteFile.buffer)
}
::std::string* WriteFile::mutable_buffer() {
  
  // @@protoc_insertion_point(field_mutable:littlstar.cfsnet.WriteFile.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WriteFile::release_buffer() {
  // @@protoc_insertion_point(field_release:littlstar.cfsnet.WriteFile.buffer)
  
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WriteFile::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    
  } else {
    
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:littlstar.cfsnet.WriteFile.buffer)
}

// uint32 start = 3;
void WriteFile::clear_start() {
  start_ = 0u;
}
::google::protobuf::uint32 WriteFile::start() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.WriteFile.start)
  return start_;
}
void WriteFile::set_start(::google::protobuf::uint32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.WriteFile.start)
}

// uint32 end = 4;
void WriteFile::clear_end() {
  end_ = 0u;
}
::google::protobuf::uint32 WriteFile::end() const {
  // @@protoc_insertion_point(field_get:littlstar.cfsnet.WriteFile.end)
  return end_;
}
void WriteFile::set_end(::google::protobuf::uint32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:littlstar.cfsnet.WriteFile.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cfsnet
}  // namespace littlstar

// @@protoc_insertion_point(global_scope)
