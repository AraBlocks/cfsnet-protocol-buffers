// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfsnet.proto

#ifndef PROTOBUF_cfsnet_2eproto__INCLUDED
#define PROTOBUF_cfsnet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_cfsnet_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[28];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsAccessFileImpl();
void InitDefaultsAccessFile();
void InitDefaultsBooleanImpl();
void InitDefaultsBoolean();
void InitDefaultsBufferImpl();
void InitDefaultsBuffer();
void InitDefaultsCloseImpl();
void InitDefaultsClose();
void InitDefaultsDownloadDirectoryImpl();
void InitDefaultsDownloadDirectory();
void InitDefaultsDownloadFileImpl();
void InitDefaultsDownloadFile();
void InitDefaultsDriveImpl();
void InitDefaultsDrive();
void InitDefaultsHandshakeImpl();
void InitDefaultsHandshake();
void InitDefaultsKeyPairImpl();
void InitDefaultsKeyPair();
void InitDefaultsListImpl();
void InitDefaultsList();
void InitDefaultsListDirectoryImpl();
void InitDefaultsListDirectory();
void InitDefaultsMakeDirectoryImpl();
void InitDefaultsMakeDirectory();
void InitDefaultsMakeDirectoryPathImpl();
void InitDefaultsMakeDirectoryPath();
void InitDefaultsNumberImpl();
void InitDefaultsNumber();
void InitDefaultsOpenImpl();
void InitDefaultsOpen();
void InitDefaultsReadImpl();
void InitDefaultsRead();
void InitDefaultsReadFileImpl();
void InitDefaultsReadFile();
void InitDefaultsRemoveDirectoryImpl();
void InitDefaultsRemoveDirectory();
void InitDefaultsRemoveDirectoryPathImpl();
void InitDefaultsRemoveDirectoryPath();
void InitDefaultsRequestImpl();
void InitDefaultsRequest();
void InitDefaultsResolveImpl();
void InitDefaultsResolve();
void InitDefaultsResponseImpl();
void InitDefaultsResponse();
void InitDefaultsStatImpl();
void InitDefaultsStat();
void InitDefaultsStatFileImpl();
void InitDefaultsStatFile();
void InitDefaultsStringImpl();
void InitDefaultsString();
void InitDefaultsTouchFileImpl();
void InitDefaultsTouchFile();
void InitDefaultsUnlinkFileImpl();
void InitDefaultsUnlinkFile();
void InitDefaultsWriteFileImpl();
void InitDefaultsWriteFile();
inline void InitDefaults() {
  InitDefaultsAccessFile();
  InitDefaultsBoolean();
  InitDefaultsBuffer();
  InitDefaultsClose();
  InitDefaultsDownloadDirectory();
  InitDefaultsDownloadFile();
  InitDefaultsDrive();
  InitDefaultsHandshake();
  InitDefaultsKeyPair();
  InitDefaultsList();
  InitDefaultsListDirectory();
  InitDefaultsMakeDirectory();
  InitDefaultsMakeDirectoryPath();
  InitDefaultsNumber();
  InitDefaultsOpen();
  InitDefaultsRead();
  InitDefaultsReadFile();
  InitDefaultsRemoveDirectory();
  InitDefaultsRemoveDirectoryPath();
  InitDefaultsRequest();
  InitDefaultsResolve();
  InitDefaultsResponse();
  InitDefaultsStat();
  InitDefaultsStatFile();
  InitDefaultsString();
  InitDefaultsTouchFile();
  InitDefaultsUnlinkFile();
  InitDefaultsWriteFile();
}
}  // namespace protobuf_cfsnet_2eproto
namespace ara {
namespace cfsnet {
class AccessFile;
class AccessFileDefaultTypeInternal;
extern AccessFileDefaultTypeInternal _AccessFile_default_instance_;
class Boolean;
class BooleanDefaultTypeInternal;
extern BooleanDefaultTypeInternal _Boolean_default_instance_;
class Buffer;
class BufferDefaultTypeInternal;
extern BufferDefaultTypeInternal _Buffer_default_instance_;
class Close;
class CloseDefaultTypeInternal;
extern CloseDefaultTypeInternal _Close_default_instance_;
class DownloadDirectory;
class DownloadDirectoryDefaultTypeInternal;
extern DownloadDirectoryDefaultTypeInternal _DownloadDirectory_default_instance_;
class DownloadFile;
class DownloadFileDefaultTypeInternal;
extern DownloadFileDefaultTypeInternal _DownloadFile_default_instance_;
class Drive;
class DriveDefaultTypeInternal;
extern DriveDefaultTypeInternal _Drive_default_instance_;
class Handshake;
class HandshakeDefaultTypeInternal;
extern HandshakeDefaultTypeInternal _Handshake_default_instance_;
class KeyPair;
class KeyPairDefaultTypeInternal;
extern KeyPairDefaultTypeInternal _KeyPair_default_instance_;
class List;
class ListDefaultTypeInternal;
extern ListDefaultTypeInternal _List_default_instance_;
class ListDirectory;
class ListDirectoryDefaultTypeInternal;
extern ListDirectoryDefaultTypeInternal _ListDirectory_default_instance_;
class MakeDirectory;
class MakeDirectoryDefaultTypeInternal;
extern MakeDirectoryDefaultTypeInternal _MakeDirectory_default_instance_;
class MakeDirectoryPath;
class MakeDirectoryPathDefaultTypeInternal;
extern MakeDirectoryPathDefaultTypeInternal _MakeDirectoryPath_default_instance_;
class Number;
class NumberDefaultTypeInternal;
extern NumberDefaultTypeInternal _Number_default_instance_;
class Open;
class OpenDefaultTypeInternal;
extern OpenDefaultTypeInternal _Open_default_instance_;
class Read;
class ReadDefaultTypeInternal;
extern ReadDefaultTypeInternal _Read_default_instance_;
class ReadFile;
class ReadFileDefaultTypeInternal;
extern ReadFileDefaultTypeInternal _ReadFile_default_instance_;
class RemoveDirectory;
class RemoveDirectoryDefaultTypeInternal;
extern RemoveDirectoryDefaultTypeInternal _RemoveDirectory_default_instance_;
class RemoveDirectoryPath;
class RemoveDirectoryPathDefaultTypeInternal;
extern RemoveDirectoryPathDefaultTypeInternal _RemoveDirectoryPath_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Resolve;
class ResolveDefaultTypeInternal;
extern ResolveDefaultTypeInternal _Resolve_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Stat;
class StatDefaultTypeInternal;
extern StatDefaultTypeInternal _Stat_default_instance_;
class StatFile;
class StatFileDefaultTypeInternal;
extern StatFileDefaultTypeInternal _StatFile_default_instance_;
class String;
class StringDefaultTypeInternal;
extern StringDefaultTypeInternal _String_default_instance_;
class TouchFile;
class TouchFileDefaultTypeInternal;
extern TouchFileDefaultTypeInternal _TouchFile_default_instance_;
class UnlinkFile;
class UnlinkFileDefaultTypeInternal;
extern UnlinkFileDefaultTypeInternal _UnlinkFile_default_instance_;
class WriteFile;
class WriteFileDefaultTypeInternal;
extern WriteFileDefaultTypeInternal _WriteFile_default_instance_;
}  // namespace cfsnet
}  // namespace ara
namespace ara {
namespace cfsnet {

enum FileMode {
  F_OK = 0,
  X_OK = 1,
  W_OK = 2,
  R_OK = 4,
  FileMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FileMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FileMode_IsValid(int value);
const FileMode FileMode_MIN = F_OK;
const FileMode FileMode_MAX = R_OK;
const int FileMode_ARRAYSIZE = FileMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* FileMode_descriptor();
inline const ::std::string& FileMode_Name(FileMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    FileMode_descriptor(), value);
}
inline bool FileMode_Parse(
    const ::std::string& name, FileMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileMode>(
    FileMode_descriptor(), name, value);
}
enum ErrorCode {
  NoError = 0,
  BadRequestError = 400,
  AccessDeniedError = 403,
  NotFoundError = 404,
  NotSupportedError = 405,
  NotOpenedError = 410,
  InternalError = 500,
  NotImplementedError = 501,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = NoError;
const ErrorCode ErrorCode_MAX = NotImplementedError;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum Operation {
  NoOperation = 0,
  ResolveOperation = 1,
  KeyPairOperation = 2,
  OpenOperation = 10,
  CloseOperation = 11,
  ReadOperation = 12,
  WriteOperation = 13,
  ReadFileOperation = 20,
  WriteFileOperation = 21,
  StatFileOperation = 22,
  UnlinkFileOperation = 23,
  AccessFileOperation = 24,
  TouchFileOperation = 25,
  DownloadFileOperation = 26,
  DownloadDirectoryOperation = 30,
  MakeDirectoryOperation = 31,
  MakeDirectoryPathOperation = 32,
  RemoveDirectoryOperation = 33,
  RemoveDirectoryPathOperation = 34,
  ListDirectoryOperation = 35,
  Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Operation_IsValid(int value);
const Operation Operation_MIN = NoOperation;
const Operation Operation_MAX = ListDirectoryOperation;
const int Operation_ARRAYSIZE = Operation_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operation_descriptor();
inline const ::std::string& Operation_Name(Operation value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operation_descriptor(), value);
}
inline bool Operation_Parse(
    const ::std::string& name, Operation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation>(
    Operation_descriptor(), name, value);
}
// ===================================================================

class AccessFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.AccessFile) */ {
 public:
  AccessFile();
  virtual ~AccessFile();

  AccessFile(const AccessFile& from);

  inline AccessFile& operator=(const AccessFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccessFile(AccessFile&& from) noexcept
    : AccessFile() {
    *this = ::std::move(from);
  }

  inline AccessFile& operator=(AccessFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccessFile* internal_default_instance() {
    return reinterpret_cast<const AccessFile*>(
               &_AccessFile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AccessFile* other);
  friend void swap(AccessFile& a, AccessFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccessFile* New() const PROTOBUF_FINAL { return New(NULL); }

  AccessFile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccessFile& from);
  void MergeFrom(const AccessFile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccessFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // .ara.cfsnet.FileMode mode = 2;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::ara::cfsnet::FileMode mode() const;
  void set_mode(::ara::cfsnet::FileMode value);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.AccessFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  int mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsAccessFileImpl();
};
// -------------------------------------------------------------------

class Boolean : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.Boolean) */ {
 public:
  Boolean();
  virtual ~Boolean();

  Boolean(const Boolean& from);

  inline Boolean& operator=(const Boolean& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Boolean(Boolean&& from) noexcept
    : Boolean() {
    *this = ::std::move(from);
  }

  inline Boolean& operator=(Boolean&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Boolean& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Boolean* internal_default_instance() {
    return reinterpret_cast<const Boolean*>(
               &_Boolean_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Boolean* other);
  friend void swap(Boolean& a, Boolean& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Boolean* New() const PROTOBUF_FINAL { return New(NULL); }

  Boolean* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Boolean& from);
  void MergeFrom(const Boolean& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Boolean* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  bool value() const;
  void set_value(bool value);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.Boolean)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool value_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsBooleanImpl();
};
// -------------------------------------------------------------------

class Buffer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.Buffer) */ {
 public:
  Buffer();
  virtual ~Buffer();

  Buffer(const Buffer& from);

  inline Buffer& operator=(const Buffer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Buffer(Buffer&& from) noexcept
    : Buffer() {
    *this = ::std::move(from);
  }

  inline Buffer& operator=(Buffer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Buffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Buffer* internal_default_instance() {
    return reinterpret_cast<const Buffer*>(
               &_Buffer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Buffer* other);
  friend void swap(Buffer& a, Buffer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Buffer* New() const PROTOBUF_FINAL { return New(NULL); }

  Buffer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Buffer& from);
  void MergeFrom(const Buffer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Buffer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // uint64 length = 2;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  ::google::protobuf::uint64 length() const;
  void set_length(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.Buffer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::uint64 length_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsBufferImpl();
};
// -------------------------------------------------------------------

class Close : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.Close) */ {
 public:
  Close();
  virtual ~Close();

  Close(const Close& from);

  inline Close& operator=(const Close& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Close(Close&& from) noexcept
    : Close() {
    *this = ::std::move(from);
  }

  inline Close& operator=(Close&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Close& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Close* internal_default_instance() {
    return reinterpret_cast<const Close*>(
               &_Close_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Close* other);
  friend void swap(Close& a, Close& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Close* New() const PROTOBUF_FINAL { return New(NULL); }

  Close* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Close& from);
  void MergeFrom(const Close& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Close* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 fileDescriptor = 1;
  void clear_filedescriptor();
  static const int kFileDescriptorFieldNumber = 1;
  ::google::protobuf::uint32 filedescriptor() const;
  void set_filedescriptor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.Close)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 filedescriptor_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsCloseImpl();
};
// -------------------------------------------------------------------

class DownloadDirectory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.DownloadDirectory) */ {
 public:
  DownloadDirectory();
  virtual ~DownloadDirectory();

  DownloadDirectory(const DownloadDirectory& from);

  inline DownloadDirectory& operator=(const DownloadDirectory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DownloadDirectory(DownloadDirectory&& from) noexcept
    : DownloadDirectory() {
    *this = ::std::move(from);
  }

  inline DownloadDirectory& operator=(DownloadDirectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadDirectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadDirectory* internal_default_instance() {
    return reinterpret_cast<const DownloadDirectory*>(
               &_DownloadDirectory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DownloadDirectory* other);
  friend void swap(DownloadDirectory& a, DownloadDirectory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DownloadDirectory* New() const PROTOBUF_FINAL { return New(NULL); }

  DownloadDirectory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DownloadDirectory& from);
  void MergeFrom(const DownloadDirectory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DownloadDirectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.DownloadDirectory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsDownloadDirectoryImpl();
};
// -------------------------------------------------------------------

class DownloadFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.DownloadFile) */ {
 public:
  DownloadFile();
  virtual ~DownloadFile();

  DownloadFile(const DownloadFile& from);

  inline DownloadFile& operator=(const DownloadFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DownloadFile(DownloadFile&& from) noexcept
    : DownloadFile() {
    *this = ::std::move(from);
  }

  inline DownloadFile& operator=(DownloadFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadFile* internal_default_instance() {
    return reinterpret_cast<const DownloadFile*>(
               &_DownloadFile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DownloadFile* other);
  friend void swap(DownloadFile& a, DownloadFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DownloadFile* New() const PROTOBUF_FINAL { return New(NULL); }

  DownloadFile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DownloadFile& from);
  void MergeFrom(const DownloadFile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DownloadFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.DownloadFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsDownloadFileImpl();
};
// -------------------------------------------------------------------

class Drive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.Drive) */ {
 public:
  Drive();
  virtual ~Drive();

  Drive(const Drive& from);

  inline Drive& operator=(const Drive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Drive(Drive&& from) noexcept
    : Drive() {
    *this = ::std::move(from);
  }

  inline Drive& operator=(Drive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Drive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Drive* internal_default_instance() {
    return reinterpret_cast<const Drive*>(
               &_Drive_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Drive* other);
  friend void swap(Drive& a, Drive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Drive* New() const PROTOBUF_FINAL { return New(NULL); }

  Drive* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Drive& from);
  void MergeFrom(const Drive& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Drive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes secretKey = 3;
  void clear_secretkey();
  static const int kSecretKeyFieldNumber = 3;
  const ::std::string& secretkey() const;
  void set_secretkey(const ::std::string& value);
  #if LANG_CXX11
  void set_secretkey(::std::string&& value);
  #endif
  void set_secretkey(const char* value);
  void set_secretkey(const void* value, size_t size);
  ::std::string* mutable_secretkey();
  ::std::string* release_secretkey();
  void set_allocated_secretkey(::std::string* secretkey);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.Drive)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr secretkey_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsDriveImpl();
};
// -------------------------------------------------------------------

class Handshake : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.Handshake) */ {
 public:
  Handshake();
  virtual ~Handshake();

  Handshake(const Handshake& from);

  inline Handshake& operator=(const Handshake& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Handshake(Handshake&& from) noexcept
    : Handshake() {
    *this = ::std::move(from);
  }

  inline Handshake& operator=(Handshake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Handshake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Handshake* internal_default_instance() {
    return reinterpret_cast<const Handshake*>(
               &_Handshake_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Handshake* other);
  friend void swap(Handshake& a, Handshake& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Handshake* New() const PROTOBUF_FINAL { return New(NULL); }

  Handshake* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Handshake& from);
  void MergeFrom(const Handshake& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Handshake* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes nonce = 1;
  void clear_nonce();
  static const int kNonceFieldNumber = 1;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_nonce(::std::string&& value);
  #endif
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bool ack = 3;
  void clear_ack();
  static const int kAckFieldNumber = 3;
  bool ack() const;
  void set_ack(bool value);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.Handshake)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  bool ack_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsHandshakeImpl();
};
// -------------------------------------------------------------------

class KeyPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.KeyPair) */ {
 public:
  KeyPair();
  virtual ~KeyPair();

  KeyPair(const KeyPair& from);

  inline KeyPair& operator=(const KeyPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyPair(KeyPair&& from) noexcept
    : KeyPair() {
    *this = ::std::move(from);
  }

  inline KeyPair& operator=(KeyPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyPair* internal_default_instance() {
    return reinterpret_cast<const KeyPair*>(
               &_KeyPair_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(KeyPair* other);
  friend void swap(KeyPair& a, KeyPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyPair* New() const PROTOBUF_FINAL { return New(NULL); }

  KeyPair* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KeyPair& from);
  void MergeFrom(const KeyPair& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KeyPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes seed = 1;
  void clear_seed();
  static const int kSeedFieldNumber = 1;
  const ::std::string& seed() const;
  void set_seed(const ::std::string& value);
  #if LANG_CXX11
  void set_seed(::std::string&& value);
  #endif
  void set_seed(const char* value);
  void set_seed(const void* value, size_t size);
  ::std::string* mutable_seed();
  ::std::string* release_seed();
  void set_allocated_seed(::std::string* seed);

  // bytes publicKey = 2;
  void clear_publickey();
  static const int kPublicKeyFieldNumber = 2;
  const ::std::string& publickey() const;
  void set_publickey(const ::std::string& value);
  #if LANG_CXX11
  void set_publickey(::std::string&& value);
  #endif
  void set_publickey(const char* value);
  void set_publickey(const void* value, size_t size);
  ::std::string* mutable_publickey();
  ::std::string* release_publickey();
  void set_allocated_publickey(::std::string* publickey);

  // bytes secretKey = 3;
  void clear_secretkey();
  static const int kSecretKeyFieldNumber = 3;
  const ::std::string& secretkey() const;
  void set_secretkey(const ::std::string& value);
  #if LANG_CXX11
  void set_secretkey(::std::string&& value);
  #endif
  void set_secretkey(const char* value);
  void set_secretkey(const void* value, size_t size);
  ::std::string* mutable_secretkey();
  ::std::string* release_secretkey();
  void set_allocated_secretkey(::std::string* secretkey);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.KeyPair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr seed_;
  ::google::protobuf::internal::ArenaStringPtr publickey_;
  ::google::protobuf::internal::ArenaStringPtr secretkey_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsKeyPairImpl();
};
// -------------------------------------------------------------------

class List : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.List) */ {
 public:
  List();
  virtual ~List();

  List(const List& from);

  inline List& operator=(const List& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  List(List&& from) noexcept
    : List() {
    *this = ::std::move(from);
  }

  inline List& operator=(List&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const List& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const List* internal_default_instance() {
    return reinterpret_cast<const List*>(
               &_List_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(List* other);
  friend void swap(List& a, List& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline List* New() const PROTOBUF_FINAL { return New(NULL); }

  List* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const List& from);
  void MergeFrom(const List& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(List* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_values(int index, ::std::string&& value);
  #endif
  void set_values(int index, const char* value);
  void set_values(int index, const void* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  #if LANG_CXX11
  void add_values(::std::string&& value);
  #endif
  void add_values(const char* value);
  void add_values(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // uint64 length = 2;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  ::google::protobuf::uint64 length() const;
  void set_length(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.List)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  ::google::protobuf::uint64 length_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsListImpl();
};
// -------------------------------------------------------------------

class ListDirectory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.ListDirectory) */ {
 public:
  ListDirectory();
  virtual ~ListDirectory();

  ListDirectory(const ListDirectory& from);

  inline ListDirectory& operator=(const ListDirectory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListDirectory(ListDirectory&& from) noexcept
    : ListDirectory() {
    *this = ::std::move(from);
  }

  inline ListDirectory& operator=(ListDirectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDirectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDirectory* internal_default_instance() {
    return reinterpret_cast<const ListDirectory*>(
               &_ListDirectory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ListDirectory* other);
  friend void swap(ListDirectory& a, ListDirectory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListDirectory* New() const PROTOBUF_FINAL { return New(NULL); }

  ListDirectory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListDirectory& from);
  void MergeFrom(const ListDirectory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListDirectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.ListDirectory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsListDirectoryImpl();
};
// -------------------------------------------------------------------

class MakeDirectory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.MakeDirectory) */ {
 public:
  MakeDirectory();
  virtual ~MakeDirectory();

  MakeDirectory(const MakeDirectory& from);

  inline MakeDirectory& operator=(const MakeDirectory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MakeDirectory(MakeDirectory&& from) noexcept
    : MakeDirectory() {
    *this = ::std::move(from);
  }

  inline MakeDirectory& operator=(MakeDirectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MakeDirectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MakeDirectory* internal_default_instance() {
    return reinterpret_cast<const MakeDirectory*>(
               &_MakeDirectory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(MakeDirectory* other);
  friend void swap(MakeDirectory& a, MakeDirectory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MakeDirectory* New() const PROTOBUF_FINAL { return New(NULL); }

  MakeDirectory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MakeDirectory& from);
  void MergeFrom(const MakeDirectory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MakeDirectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.MakeDirectory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsMakeDirectoryImpl();
};
// -------------------------------------------------------------------

class MakeDirectoryPath : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.MakeDirectoryPath) */ {
 public:
  MakeDirectoryPath();
  virtual ~MakeDirectoryPath();

  MakeDirectoryPath(const MakeDirectoryPath& from);

  inline MakeDirectoryPath& operator=(const MakeDirectoryPath& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MakeDirectoryPath(MakeDirectoryPath&& from) noexcept
    : MakeDirectoryPath() {
    *this = ::std::move(from);
  }

  inline MakeDirectoryPath& operator=(MakeDirectoryPath&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MakeDirectoryPath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MakeDirectoryPath* internal_default_instance() {
    return reinterpret_cast<const MakeDirectoryPath*>(
               &_MakeDirectoryPath_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(MakeDirectoryPath* other);
  friend void swap(MakeDirectoryPath& a, MakeDirectoryPath& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MakeDirectoryPath* New() const PROTOBUF_FINAL { return New(NULL); }

  MakeDirectoryPath* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MakeDirectoryPath& from);
  void MergeFrom(const MakeDirectoryPath& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MakeDirectoryPath* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.MakeDirectoryPath)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsMakeDirectoryPathImpl();
};
// -------------------------------------------------------------------

class Number : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.Number) */ {
 public:
  Number();
  virtual ~Number();

  Number(const Number& from);

  inline Number& operator=(const Number& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Number(Number&& from) noexcept
    : Number() {
    *this = ::std::move(from);
  }

  inline Number& operator=(Number&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Number& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Number* internal_default_instance() {
    return reinterpret_cast<const Number*>(
               &_Number_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(Number* other);
  friend void swap(Number& a, Number& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Number* New() const PROTOBUF_FINAL { return New(NULL); }

  Number* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Number& from);
  void MergeFrom(const Number& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Number* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  double value() const;
  void set_value(double value);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.Number)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double value_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsNumberImpl();
};
// -------------------------------------------------------------------

class Open : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.Open) */ {
 public:
  Open();
  virtual ~Open();

  Open(const Open& from);

  inline Open& operator=(const Open& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Open(Open&& from) noexcept
    : Open() {
    *this = ::std::move(from);
  }

  inline Open& operator=(Open&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Open& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Open* internal_default_instance() {
    return reinterpret_cast<const Open*>(
               &_Open_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(Open* other);
  friend void swap(Open& a, Open& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Open* New() const PROTOBUF_FINAL { return New(NULL); }

  Open* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Open& from);
  void MergeFrom(const Open& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Open* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  const ::std::string& flags() const;
  void set_flags(const ::std::string& value);
  #if LANG_CXX11
  void set_flags(::std::string&& value);
  #endif
  void set_flags(const char* value);
  void set_flags(const char* value, size_t size);
  ::std::string* mutable_flags();
  ::std::string* release_flags();
  void set_allocated_flags(::std::string* flags);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.Open)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr flags_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsOpenImpl();
};
// -------------------------------------------------------------------

class Read : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.Read) */ {
 public:
  Read();
  virtual ~Read();

  Read(const Read& from);

  inline Read& operator=(const Read& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Read(Read&& from) noexcept
    : Read() {
    *this = ::std::move(from);
  }

  inline Read& operator=(Read&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Read& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Read* internal_default_instance() {
    return reinterpret_cast<const Read*>(
               &_Read_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(Read* other);
  friend void swap(Read& a, Read& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Read* New() const PROTOBUF_FINAL { return New(NULL); }

  Read* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Read& from);
  void MergeFrom(const Read& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Read* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 fileDescriptor = 1;
  void clear_filedescriptor();
  static const int kFileDescriptorFieldNumber = 1;
  ::google::protobuf::uint32 filedescriptor() const;
  void set_filedescriptor(::google::protobuf::uint32 value);

  // uint32 start = 2;
  void clear_start();
  static const int kStartFieldNumber = 2;
  ::google::protobuf::uint32 start() const;
  void set_start(::google::protobuf::uint32 value);

  // uint32 end = 3;
  void clear_end();
  static const int kEndFieldNumber = 3;
  ::google::protobuf::uint32 end() const;
  void set_end(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.Read)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 filedescriptor_;
  ::google::protobuf::uint32 start_;
  ::google::protobuf::uint32 end_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsReadImpl();
};
// -------------------------------------------------------------------

class ReadFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.ReadFile) */ {
 public:
  ReadFile();
  virtual ~ReadFile();

  ReadFile(const ReadFile& from);

  inline ReadFile& operator=(const ReadFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadFile(ReadFile&& from) noexcept
    : ReadFile() {
    *this = ::std::move(from);
  }

  inline ReadFile& operator=(ReadFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadFile* internal_default_instance() {
    return reinterpret_cast<const ReadFile*>(
               &_ReadFile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ReadFile* other);
  friend void swap(ReadFile& a, ReadFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadFile* New() const PROTOBUF_FINAL { return New(NULL); }

  ReadFile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReadFile& from);
  void MergeFrom(const ReadFile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReadFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // uint32 start = 2;
  void clear_start();
  static const int kStartFieldNumber = 2;
  ::google::protobuf::uint32 start() const;
  void set_start(::google::protobuf::uint32 value);

  // uint32 end = 3;
  void clear_end();
  static const int kEndFieldNumber = 3;
  ::google::protobuf::uint32 end() const;
  void set_end(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.ReadFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::uint32 start_;
  ::google::protobuf::uint32 end_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsReadFileImpl();
};
// -------------------------------------------------------------------

class RemoveDirectory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.RemoveDirectory) */ {
 public:
  RemoveDirectory();
  virtual ~RemoveDirectory();

  RemoveDirectory(const RemoveDirectory& from);

  inline RemoveDirectory& operator=(const RemoveDirectory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveDirectory(RemoveDirectory&& from) noexcept
    : RemoveDirectory() {
    *this = ::std::move(from);
  }

  inline RemoveDirectory& operator=(RemoveDirectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveDirectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveDirectory* internal_default_instance() {
    return reinterpret_cast<const RemoveDirectory*>(
               &_RemoveDirectory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(RemoveDirectory* other);
  friend void swap(RemoveDirectory& a, RemoveDirectory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveDirectory* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoveDirectory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemoveDirectory& from);
  void MergeFrom(const RemoveDirectory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemoveDirectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.RemoveDirectory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsRemoveDirectoryImpl();
};
// -------------------------------------------------------------------

class RemoveDirectoryPath : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.RemoveDirectoryPath) */ {
 public:
  RemoveDirectoryPath();
  virtual ~RemoveDirectoryPath();

  RemoveDirectoryPath(const RemoveDirectoryPath& from);

  inline RemoveDirectoryPath& operator=(const RemoveDirectoryPath& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveDirectoryPath(RemoveDirectoryPath&& from) noexcept
    : RemoveDirectoryPath() {
    *this = ::std::move(from);
  }

  inline RemoveDirectoryPath& operator=(RemoveDirectoryPath&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveDirectoryPath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveDirectoryPath* internal_default_instance() {
    return reinterpret_cast<const RemoveDirectoryPath*>(
               &_RemoveDirectoryPath_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(RemoveDirectoryPath* other);
  friend void swap(RemoveDirectoryPath& a, RemoveDirectoryPath& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveDirectoryPath* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoveDirectoryPath* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemoveDirectoryPath& from);
  void MergeFrom(const RemoveDirectoryPath& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemoveDirectoryPath* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.RemoveDirectoryPath)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsRemoveDirectoryPathImpl();
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes nonce = 1;
  void clear_nonce();
  static const int kNonceFieldNumber = 1;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_nonce(::std::string&& value);
  #endif
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // bytes buffer = 4;
  void clear_buffer();
  static const int kBufferFieldNumber = 4;
  const ::std::string& buffer() const;
  void set_buffer(const ::std::string& value);
  #if LANG_CXX11
  void set_buffer(::std::string&& value);
  #endif
  void set_buffer(const char* value);
  void set_buffer(const void* value, size_t size);
  ::std::string* mutable_buffer();
  ::std::string* release_buffer();
  void set_allocated_buffer(::std::string* buffer);

  // .ara.cfsnet.Drive drive = 2;
  bool has_drive() const;
  void clear_drive();
  static const int kDriveFieldNumber = 2;
  const ::ara::cfsnet::Drive& drive() const;
  ::ara::cfsnet::Drive* release_drive();
  ::ara::cfsnet::Drive* mutable_drive();
  void set_allocated_drive(::ara::cfsnet::Drive* drive);

  // .ara.cfsnet.Operation operation = 3;
  void clear_operation();
  static const int kOperationFieldNumber = 3;
  ::ara::cfsnet::Operation operation() const;
  void set_operation(::ara::cfsnet::Operation value);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  ::google::protobuf::internal::ArenaStringPtr buffer_;
  ::ara::cfsnet::Drive* drive_;
  int operation_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsRequestImpl();
};
// -------------------------------------------------------------------

class Resolve : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.Resolve) */ {
 public:
  Resolve();
  virtual ~Resolve();

  Resolve(const Resolve& from);

  inline Resolve& operator=(const Resolve& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Resolve(Resolve&& from) noexcept
    : Resolve() {
    *this = ::std::move(from);
  }

  inline Resolve& operator=(Resolve&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Resolve& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Resolve* internal_default_instance() {
    return reinterpret_cast<const Resolve*>(
               &_Resolve_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(Resolve* other);
  friend void swap(Resolve& a, Resolve& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Resolve* New() const PROTOBUF_FINAL { return New(NULL); }

  Resolve* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Resolve& from);
  void MergeFrom(const Resolve& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Resolve* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.Resolve)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsResolveImpl();
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes nonce = 1;
  void clear_nonce();
  static const int kNonceFieldNumber = 1;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_nonce(::std::string&& value);
  #endif
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // bytes buffer = 6;
  void clear_buffer();
  static const int kBufferFieldNumber = 6;
  const ::std::string& buffer() const;
  void set_buffer(const ::std::string& value);
  #if LANG_CXX11
  void set_buffer(::std::string&& value);
  #endif
  void set_buffer(const char* value);
  void set_buffer(const void* value, size_t size);
  ::std::string* mutable_buffer();
  ::std::string* release_buffer();
  void set_allocated_buffer(::std::string* buffer);

  // .ara.cfsnet.Drive drive = 2;
  bool has_drive() const;
  void clear_drive();
  static const int kDriveFieldNumber = 2;
  const ::ara::cfsnet::Drive& drive() const;
  ::ara::cfsnet::Drive* release_drive();
  ::ara::cfsnet::Drive* mutable_drive();
  void set_allocated_drive(::ara::cfsnet::Drive* drive);

  // .ara.cfsnet.Request request = 4;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 4;
  const ::ara::cfsnet::Request& request() const;
  ::ara::cfsnet::Request* release_request();
  ::ara::cfsnet::Request* mutable_request();
  void set_allocated_request(::ara::cfsnet::Request* request);

  // .ara.cfsnet.Operation operation = 3;
  void clear_operation();
  static const int kOperationFieldNumber = 3;
  ::ara::cfsnet::Operation operation() const;
  void set_operation(::ara::cfsnet::Operation value);

  // .ara.cfsnet.ErrorCode errorCode = 5;
  void clear_errorcode();
  static const int kErrorCodeFieldNumber = 5;
  ::ara::cfsnet::ErrorCode errorcode() const;
  void set_errorcode(::ara::cfsnet::ErrorCode value);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  ::google::protobuf::internal::ArenaStringPtr buffer_;
  ::ara::cfsnet::Drive* drive_;
  ::ara::cfsnet::Request* request_;
  int operation_;
  int errorcode_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsResponseImpl();
};
// -------------------------------------------------------------------

class Stat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.Stat) */ {
 public:
  Stat();
  virtual ~Stat();

  Stat(const Stat& from);

  inline Stat& operator=(const Stat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Stat(Stat&& from) noexcept
    : Stat() {
    *this = ::std::move(from);
  }

  inline Stat& operator=(Stat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Stat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stat* internal_default_instance() {
    return reinterpret_cast<const Stat*>(
               &_Stat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(Stat* other);
  friend void swap(Stat& a, Stat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Stat* New() const PROTOBUF_FINAL { return New(NULL); }

  Stat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Stat& from);
  void MergeFrom(const Stat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Stat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // uint32 gid = 2;
  void clear_gid();
  static const int kGidFieldNumber = 2;
  ::google::protobuf::uint32 gid() const;
  void set_gid(::google::protobuf::uint32 value);

  // uint64 size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // uint64 atime = 5;
  void clear_atime();
  static const int kAtimeFieldNumber = 5;
  ::google::protobuf::uint64 atime() const;
  void set_atime(::google::protobuf::uint64 value);

  // uint64 ctime = 6;
  void clear_ctime();
  static const int kCtimeFieldNumber = 6;
  ::google::protobuf::uint64 ctime() const;
  void set_ctime(::google::protobuf::uint64 value);

  // uint64 mtime = 7;
  void clear_mtime();
  static const int kMtimeFieldNumber = 7;
  ::google::protobuf::uint64 mtime() const;
  void set_mtime(::google::protobuf::uint64 value);

  // uint64 blocks = 8;
  void clear_blocks();
  static const int kBlocksFieldNumber = 8;
  ::google::protobuf::uint64 blocks() const;
  void set_blocks(::google::protobuf::uint64 value);

  // uint32 mode = 3;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  ::google::protobuf::uint32 mode() const;
  void set_mode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.Stat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 gid_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint64 atime_;
  ::google::protobuf::uint64 ctime_;
  ::google::protobuf::uint64 mtime_;
  ::google::protobuf::uint64 blocks_;
  ::google::protobuf::uint32 mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsStatImpl();
};
// -------------------------------------------------------------------

class StatFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.StatFile) */ {
 public:
  StatFile();
  virtual ~StatFile();

  StatFile(const StatFile& from);

  inline StatFile& operator=(const StatFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatFile(StatFile&& from) noexcept
    : StatFile() {
    *this = ::std::move(from);
  }

  inline StatFile& operator=(StatFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatFile* internal_default_instance() {
    return reinterpret_cast<const StatFile*>(
               &_StatFile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(StatFile* other);
  friend void swap(StatFile& a, StatFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatFile* New() const PROTOBUF_FINAL { return New(NULL); }

  StatFile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StatFile& from);
  void MergeFrom(const StatFile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StatFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.StatFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsStatFileImpl();
};
// -------------------------------------------------------------------

class String : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.String) */ {
 public:
  String();
  virtual ~String();

  String(const String& from);

  inline String& operator=(const String& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  String(String&& from) noexcept
    : String() {
    *this = ::std::move(from);
  }

  inline String& operator=(String&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const String& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const String* internal_default_instance() {
    return reinterpret_cast<const String*>(
               &_String_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(String* other);
  friend void swap(String& a, String& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline String* New() const PROTOBUF_FINAL { return New(NULL); }

  String* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const String& from);
  void MergeFrom(const String& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(String* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.String)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsStringImpl();
};
// -------------------------------------------------------------------

class TouchFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.TouchFile) */ {
 public:
  TouchFile();
  virtual ~TouchFile();

  TouchFile(const TouchFile& from);

  inline TouchFile& operator=(const TouchFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TouchFile(TouchFile&& from) noexcept
    : TouchFile() {
    *this = ::std::move(from);
  }

  inline TouchFile& operator=(TouchFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TouchFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TouchFile* internal_default_instance() {
    return reinterpret_cast<const TouchFile*>(
               &_TouchFile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(TouchFile* other);
  friend void swap(TouchFile& a, TouchFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TouchFile* New() const PROTOBUF_FINAL { return New(NULL); }

  TouchFile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TouchFile& from);
  void MergeFrom(const TouchFile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TouchFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.TouchFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsTouchFileImpl();
};
// -------------------------------------------------------------------

class UnlinkFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.UnlinkFile) */ {
 public:
  UnlinkFile();
  virtual ~UnlinkFile();

  UnlinkFile(const UnlinkFile& from);

  inline UnlinkFile& operator=(const UnlinkFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnlinkFile(UnlinkFile&& from) noexcept
    : UnlinkFile() {
    *this = ::std::move(from);
  }

  inline UnlinkFile& operator=(UnlinkFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlinkFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnlinkFile* internal_default_instance() {
    return reinterpret_cast<const UnlinkFile*>(
               &_UnlinkFile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(UnlinkFile* other);
  friend void swap(UnlinkFile& a, UnlinkFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnlinkFile* New() const PROTOBUF_FINAL { return New(NULL); }

  UnlinkFile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnlinkFile& from);
  void MergeFrom(const UnlinkFile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnlinkFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.UnlinkFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsUnlinkFileImpl();
};
// -------------------------------------------------------------------

class WriteFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ara.cfsnet.WriteFile) */ {
 public:
  WriteFile();
  virtual ~WriteFile();

  WriteFile(const WriteFile& from);

  inline WriteFile& operator=(const WriteFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteFile(WriteFile&& from) noexcept
    : WriteFile() {
    *this = ::std::move(from);
  }

  inline WriteFile& operator=(WriteFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteFile* internal_default_instance() {
    return reinterpret_cast<const WriteFile*>(
               &_WriteFile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(WriteFile* other);
  friend void swap(WriteFile& a, WriteFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteFile* New() const PROTOBUF_FINAL { return New(NULL); }

  WriteFile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WriteFile& from);
  void MergeFrom(const WriteFile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WriteFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // bytes buffer = 2;
  void clear_buffer();
  static const int kBufferFieldNumber = 2;
  const ::std::string& buffer() const;
  void set_buffer(const ::std::string& value);
  #if LANG_CXX11
  void set_buffer(::std::string&& value);
  #endif
  void set_buffer(const char* value);
  void set_buffer(const void* value, size_t size);
  ::std::string* mutable_buffer();
  ::std::string* release_buffer();
  void set_allocated_buffer(::std::string* buffer);

  // uint32 start = 3;
  void clear_start();
  static const int kStartFieldNumber = 3;
  ::google::protobuf::uint32 start() const;
  void set_start(::google::protobuf::uint32 value);

  // uint32 end = 4;
  void clear_end();
  static const int kEndFieldNumber = 4;
  ::google::protobuf::uint32 end() const;
  void set_end(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ara.cfsnet.WriteFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr buffer_;
  ::google::protobuf::uint32 start_;
  ::google::protobuf::uint32 end_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfsnet_2eproto::TableStruct;
  friend void ::protobuf_cfsnet_2eproto::InitDefaultsWriteFileImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccessFile

// string path = 1;
inline void AccessFile::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessFile::path() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.AccessFile.path)
  return path_.GetNoArena();
}
inline void AccessFile::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.AccessFile.path)
}
#if LANG_CXX11
inline void AccessFile::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.AccessFile.path)
}
#endif
inline void AccessFile::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.AccessFile.path)
}
inline void AccessFile::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.AccessFile.path)
}
inline ::std::string* AccessFile::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.AccessFile.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessFile::release_path() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.AccessFile.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessFile::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.AccessFile.path)
}

// .ara.cfsnet.FileMode mode = 2;
inline void AccessFile::clear_mode() {
  mode_ = 0;
}
inline ::ara::cfsnet::FileMode AccessFile::mode() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.AccessFile.mode)
  return static_cast< ::ara::cfsnet::FileMode >(mode_);
}
inline void AccessFile::set_mode(::ara::cfsnet::FileMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.AccessFile.mode)
}

// -------------------------------------------------------------------

// Boolean

// bool value = 1;
inline void Boolean::clear_value() {
  value_ = false;
}
inline bool Boolean::value() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Boolean.value)
  return value_;
}
inline void Boolean::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.Boolean.value)
}

// -------------------------------------------------------------------

// Buffer

// bytes value = 1;
inline void Buffer::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Buffer::value() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Buffer.value)
  return value_.GetNoArena();
}
inline void Buffer::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.Buffer.value)
}
#if LANG_CXX11
inline void Buffer::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.Buffer.value)
}
#endif
inline void Buffer::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.Buffer.value)
}
inline void Buffer::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.Buffer.value)
}
inline ::std::string* Buffer::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.Buffer.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Buffer::release_value() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.Buffer.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Buffer::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.Buffer.value)
}

// uint64 length = 2;
inline void Buffer::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Buffer::length() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Buffer.length)
  return length_;
}
inline void Buffer::set_length(::google::protobuf::uint64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.Buffer.length)
}

// -------------------------------------------------------------------

// Close

// uint32 fileDescriptor = 1;
inline void Close::clear_filedescriptor() {
  filedescriptor_ = 0u;
}
inline ::google::protobuf::uint32 Close::filedescriptor() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Close.fileDescriptor)
  return filedescriptor_;
}
inline void Close::set_filedescriptor(::google::protobuf::uint32 value) {
  
  filedescriptor_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.Close.fileDescriptor)
}

// -------------------------------------------------------------------

// DownloadDirectory

// string path = 1;
inline void DownloadDirectory::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DownloadDirectory::path() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.DownloadDirectory.path)
  return path_.GetNoArena();
}
inline void DownloadDirectory::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.DownloadDirectory.path)
}
#if LANG_CXX11
inline void DownloadDirectory::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.DownloadDirectory.path)
}
#endif
inline void DownloadDirectory::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.DownloadDirectory.path)
}
inline void DownloadDirectory::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.DownloadDirectory.path)
}
inline ::std::string* DownloadDirectory::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.DownloadDirectory.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DownloadDirectory::release_path() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.DownloadDirectory.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DownloadDirectory::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.DownloadDirectory.path)
}

// -------------------------------------------------------------------

// DownloadFile

// string path = 1;
inline void DownloadFile::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DownloadFile::path() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.DownloadFile.path)
  return path_.GetNoArena();
}
inline void DownloadFile::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.DownloadFile.path)
}
#if LANG_CXX11
inline void DownloadFile::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.DownloadFile.path)
}
#endif
inline void DownloadFile::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.DownloadFile.path)
}
inline void DownloadFile::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.DownloadFile.path)
}
inline ::std::string* DownloadFile::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.DownloadFile.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DownloadFile::release_path() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.DownloadFile.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DownloadFile::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.DownloadFile.path)
}

// -------------------------------------------------------------------

// Drive

// bytes id = 1;
inline void Drive::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Drive::id() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Drive.id)
  return id_.GetNoArena();
}
inline void Drive::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.Drive.id)
}
#if LANG_CXX11
inline void Drive::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.Drive.id)
}
#endif
inline void Drive::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.Drive.id)
}
inline void Drive::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.Drive.id)
}
inline ::std::string* Drive::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.Drive.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Drive::release_id() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.Drive.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Drive::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.Drive.id)
}

// bytes key = 2;
inline void Drive::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Drive::key() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Drive.key)
  return key_.GetNoArena();
}
inline void Drive::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.Drive.key)
}
#if LANG_CXX11
inline void Drive::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.Drive.key)
}
#endif
inline void Drive::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.Drive.key)
}
inline void Drive::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.Drive.key)
}
inline ::std::string* Drive::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.Drive.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Drive::release_key() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.Drive.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Drive::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.Drive.key)
}

// bytes secretKey = 3;
inline void Drive::clear_secretkey() {
  secretkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Drive::secretkey() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Drive.secretKey)
  return secretkey_.GetNoArena();
}
inline void Drive::set_secretkey(const ::std::string& value) {
  
  secretkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.Drive.secretKey)
}
#if LANG_CXX11
inline void Drive::set_secretkey(::std::string&& value) {
  
  secretkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.Drive.secretKey)
}
#endif
inline void Drive::set_secretkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secretkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.Drive.secretKey)
}
inline void Drive::set_secretkey(const void* value, size_t size) {
  
  secretkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.Drive.secretKey)
}
inline ::std::string* Drive::mutable_secretkey() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.Drive.secretKey)
  return secretkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Drive::release_secretkey() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.Drive.secretKey)
  
  return secretkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Drive::set_allocated_secretkey(::std::string* secretkey) {
  if (secretkey != NULL) {
    
  } else {
    
  }
  secretkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secretkey);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.Drive.secretKey)
}

// -------------------------------------------------------------------

// Handshake

// bytes nonce = 1;
inline void Handshake::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Handshake::nonce() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Handshake.nonce)
  return nonce_.GetNoArena();
}
inline void Handshake::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.Handshake.nonce)
}
#if LANG_CXX11
inline void Handshake::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.Handshake.nonce)
}
#endif
inline void Handshake::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.Handshake.nonce)
}
inline void Handshake::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.Handshake.nonce)
}
inline ::std::string* Handshake::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.Handshake.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Handshake::release_nonce() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.Handshake.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Handshake::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.Handshake.nonce)
}

// bytes key = 2;
inline void Handshake::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Handshake::key() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Handshake.key)
  return key_.GetNoArena();
}
inline void Handshake::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.Handshake.key)
}
#if LANG_CXX11
inline void Handshake::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.Handshake.key)
}
#endif
inline void Handshake::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.Handshake.key)
}
inline void Handshake::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.Handshake.key)
}
inline ::std::string* Handshake::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.Handshake.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Handshake::release_key() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.Handshake.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Handshake::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.Handshake.key)
}

// bool ack = 3;
inline void Handshake::clear_ack() {
  ack_ = false;
}
inline bool Handshake::ack() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Handshake.ack)
  return ack_;
}
inline void Handshake::set_ack(bool value) {
  
  ack_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.Handshake.ack)
}

// -------------------------------------------------------------------

// KeyPair

// bytes seed = 1;
inline void KeyPair::clear_seed() {
  seed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyPair::seed() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.KeyPair.seed)
  return seed_.GetNoArena();
}
inline void KeyPair::set_seed(const ::std::string& value) {
  
  seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.KeyPair.seed)
}
#if LANG_CXX11
inline void KeyPair::set_seed(::std::string&& value) {
  
  seed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.KeyPair.seed)
}
#endif
inline void KeyPair::set_seed(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.KeyPair.seed)
}
inline void KeyPair::set_seed(const void* value, size_t size) {
  
  seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.KeyPair.seed)
}
inline ::std::string* KeyPair::mutable_seed() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.KeyPair.seed)
  return seed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyPair::release_seed() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.KeyPair.seed)
  
  return seed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyPair::set_allocated_seed(::std::string* seed) {
  if (seed != NULL) {
    
  } else {
    
  }
  seed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seed);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.KeyPair.seed)
}

// bytes publicKey = 2;
inline void KeyPair::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyPair::publickey() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.KeyPair.publicKey)
  return publickey_.GetNoArena();
}
inline void KeyPair::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.KeyPair.publicKey)
}
#if LANG_CXX11
inline void KeyPair::set_publickey(::std::string&& value) {
  
  publickey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.KeyPair.publicKey)
}
#endif
inline void KeyPair::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.KeyPair.publicKey)
}
inline void KeyPair::set_publickey(const void* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.KeyPair.publicKey)
}
inline ::std::string* KeyPair::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.KeyPair.publicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyPair::release_publickey() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.KeyPair.publicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyPair::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.KeyPair.publicKey)
}

// bytes secretKey = 3;
inline void KeyPair::clear_secretkey() {
  secretkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyPair::secretkey() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.KeyPair.secretKey)
  return secretkey_.GetNoArena();
}
inline void KeyPair::set_secretkey(const ::std::string& value) {
  
  secretkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.KeyPair.secretKey)
}
#if LANG_CXX11
inline void KeyPair::set_secretkey(::std::string&& value) {
  
  secretkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.KeyPair.secretKey)
}
#endif
inline void KeyPair::set_secretkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secretkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.KeyPair.secretKey)
}
inline void KeyPair::set_secretkey(const void* value, size_t size) {
  
  secretkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.KeyPair.secretKey)
}
inline ::std::string* KeyPair::mutable_secretkey() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.KeyPair.secretKey)
  return secretkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyPair::release_secretkey() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.KeyPair.secretKey)
  
  return secretkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyPair::set_allocated_secretkey(::std::string* secretkey) {
  if (secretkey != NULL) {
    
  } else {
    
  }
  secretkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secretkey);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.KeyPair.secretKey)
}

// -------------------------------------------------------------------

// List

// repeated bytes values = 1;
inline int List::values_size() const {
  return values_.size();
}
inline void List::clear_values() {
  values_.Clear();
}
inline const ::std::string& List::values(int index) const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.List.values)
  return values_.Get(index);
}
inline ::std::string* List::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.List.values)
  return values_.Mutable(index);
}
inline void List::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ara.cfsnet.List.values)
  values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void List::set_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ara.cfsnet.List.values)
  values_.Mutable(index)->assign(std::move(value));
}
#endif
inline void List::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.List.values)
}
inline void List::set_values(int index, const void* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.List.values)
}
inline ::std::string* List::add_values() {
  // @@protoc_insertion_point(field_add_mutable:ara.cfsnet.List.values)
  return values_.Add();
}
inline void List::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ara.cfsnet.List.values)
}
#if LANG_CXX11
inline void List::add_values(::std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ara.cfsnet.List.values)
}
#endif
inline void List::add_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ara.cfsnet.List.values)
}
inline void List::add_values(const void* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ara.cfsnet.List.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
List::values() const {
  // @@protoc_insertion_point(field_list:ara.cfsnet.List.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
List::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:ara.cfsnet.List.values)
  return &values_;
}

// uint64 length = 2;
inline void List::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 List::length() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.List.length)
  return length_;
}
inline void List::set_length(::google::protobuf::uint64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.List.length)
}

// -------------------------------------------------------------------

// ListDirectory

// string path = 1;
inline void ListDirectory::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListDirectory::path() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.ListDirectory.path)
  return path_.GetNoArena();
}
inline void ListDirectory::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.ListDirectory.path)
}
#if LANG_CXX11
inline void ListDirectory::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.ListDirectory.path)
}
#endif
inline void ListDirectory::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.ListDirectory.path)
}
inline void ListDirectory::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.ListDirectory.path)
}
inline ::std::string* ListDirectory::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.ListDirectory.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListDirectory::release_path() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.ListDirectory.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDirectory::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.ListDirectory.path)
}

// -------------------------------------------------------------------

// MakeDirectory

// string path = 1;
inline void MakeDirectory::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MakeDirectory::path() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.MakeDirectory.path)
  return path_.GetNoArena();
}
inline void MakeDirectory::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.MakeDirectory.path)
}
#if LANG_CXX11
inline void MakeDirectory::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.MakeDirectory.path)
}
#endif
inline void MakeDirectory::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.MakeDirectory.path)
}
inline void MakeDirectory::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.MakeDirectory.path)
}
inline ::std::string* MakeDirectory::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.MakeDirectory.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MakeDirectory::release_path() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.MakeDirectory.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MakeDirectory::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.MakeDirectory.path)
}

// -------------------------------------------------------------------

// MakeDirectoryPath

// string path = 1;
inline void MakeDirectoryPath::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MakeDirectoryPath::path() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.MakeDirectoryPath.path)
  return path_.GetNoArena();
}
inline void MakeDirectoryPath::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.MakeDirectoryPath.path)
}
#if LANG_CXX11
inline void MakeDirectoryPath::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.MakeDirectoryPath.path)
}
#endif
inline void MakeDirectoryPath::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.MakeDirectoryPath.path)
}
inline void MakeDirectoryPath::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.MakeDirectoryPath.path)
}
inline ::std::string* MakeDirectoryPath::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.MakeDirectoryPath.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MakeDirectoryPath::release_path() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.MakeDirectoryPath.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MakeDirectoryPath::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.MakeDirectoryPath.path)
}

// -------------------------------------------------------------------

// Number

// double value = 1;
inline void Number::clear_value() {
  value_ = 0;
}
inline double Number::value() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Number.value)
  return value_;
}
inline void Number::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.Number.value)
}

// -------------------------------------------------------------------

// Open

// string path = 1;
inline void Open::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Open::path() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Open.path)
  return path_.GetNoArena();
}
inline void Open::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.Open.path)
}
#if LANG_CXX11
inline void Open::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.Open.path)
}
#endif
inline void Open::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.Open.path)
}
inline void Open::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.Open.path)
}
inline ::std::string* Open::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.Open.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Open::release_path() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.Open.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Open::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.Open.path)
}

// string flags = 2;
inline void Open::clear_flags() {
  flags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Open::flags() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Open.flags)
  return flags_.GetNoArena();
}
inline void Open::set_flags(const ::std::string& value) {
  
  flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.Open.flags)
}
#if LANG_CXX11
inline void Open::set_flags(::std::string&& value) {
  
  flags_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.Open.flags)
}
#endif
inline void Open::set_flags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.Open.flags)
}
inline void Open::set_flags(const char* value, size_t size) {
  
  flags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.Open.flags)
}
inline ::std::string* Open::mutable_flags() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.Open.flags)
  return flags_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Open::release_flags() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.Open.flags)
  
  return flags_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Open::set_allocated_flags(::std::string* flags) {
  if (flags != NULL) {
    
  } else {
    
  }
  flags_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), flags);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.Open.flags)
}

// -------------------------------------------------------------------

// Read

// uint32 fileDescriptor = 1;
inline void Read::clear_filedescriptor() {
  filedescriptor_ = 0u;
}
inline ::google::protobuf::uint32 Read::filedescriptor() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Read.fileDescriptor)
  return filedescriptor_;
}
inline void Read::set_filedescriptor(::google::protobuf::uint32 value) {
  
  filedescriptor_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.Read.fileDescriptor)
}

// uint32 start = 2;
inline void Read::clear_start() {
  start_ = 0u;
}
inline ::google::protobuf::uint32 Read::start() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Read.start)
  return start_;
}
inline void Read::set_start(::google::protobuf::uint32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.Read.start)
}

// uint32 end = 3;
inline void Read::clear_end() {
  end_ = 0u;
}
inline ::google::protobuf::uint32 Read::end() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Read.end)
  return end_;
}
inline void Read::set_end(::google::protobuf::uint32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.Read.end)
}

// -------------------------------------------------------------------

// ReadFile

// string path = 1;
inline void ReadFile::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadFile::path() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.ReadFile.path)
  return path_.GetNoArena();
}
inline void ReadFile::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.ReadFile.path)
}
#if LANG_CXX11
inline void ReadFile::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.ReadFile.path)
}
#endif
inline void ReadFile::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.ReadFile.path)
}
inline void ReadFile::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.ReadFile.path)
}
inline ::std::string* ReadFile::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.ReadFile.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadFile::release_path() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.ReadFile.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadFile::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.ReadFile.path)
}

// uint32 start = 2;
inline void ReadFile::clear_start() {
  start_ = 0u;
}
inline ::google::protobuf::uint32 ReadFile::start() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.ReadFile.start)
  return start_;
}
inline void ReadFile::set_start(::google::protobuf::uint32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.ReadFile.start)
}

// uint32 end = 3;
inline void ReadFile::clear_end() {
  end_ = 0u;
}
inline ::google::protobuf::uint32 ReadFile::end() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.ReadFile.end)
  return end_;
}
inline void ReadFile::set_end(::google::protobuf::uint32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.ReadFile.end)
}

// -------------------------------------------------------------------

// RemoveDirectory

// string path = 1;
inline void RemoveDirectory::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveDirectory::path() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.RemoveDirectory.path)
  return path_.GetNoArena();
}
inline void RemoveDirectory::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.RemoveDirectory.path)
}
#if LANG_CXX11
inline void RemoveDirectory::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.RemoveDirectory.path)
}
#endif
inline void RemoveDirectory::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.RemoveDirectory.path)
}
inline void RemoveDirectory::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.RemoveDirectory.path)
}
inline ::std::string* RemoveDirectory::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.RemoveDirectory.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveDirectory::release_path() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.RemoveDirectory.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveDirectory::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.RemoveDirectory.path)
}

// -------------------------------------------------------------------

// RemoveDirectoryPath

// string path = 1;
inline void RemoveDirectoryPath::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveDirectoryPath::path() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.RemoveDirectoryPath.path)
  return path_.GetNoArena();
}
inline void RemoveDirectoryPath::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.RemoveDirectoryPath.path)
}
#if LANG_CXX11
inline void RemoveDirectoryPath::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.RemoveDirectoryPath.path)
}
#endif
inline void RemoveDirectoryPath::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.RemoveDirectoryPath.path)
}
inline void RemoveDirectoryPath::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.RemoveDirectoryPath.path)
}
inline ::std::string* RemoveDirectoryPath::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.RemoveDirectoryPath.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveDirectoryPath::release_path() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.RemoveDirectoryPath.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveDirectoryPath::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.RemoveDirectoryPath.path)
}

// -------------------------------------------------------------------

// Request

// bytes nonce = 1;
inline void Request::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::nonce() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Request.nonce)
  return nonce_.GetNoArena();
}
inline void Request::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.Request.nonce)
}
#if LANG_CXX11
inline void Request::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.Request.nonce)
}
#endif
inline void Request::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.Request.nonce)
}
inline void Request::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.Request.nonce)
}
inline ::std::string* Request::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.Request.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_nonce() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.Request.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.Request.nonce)
}

// .ara.cfsnet.Drive drive = 2;
inline bool Request::has_drive() const {
  return this != internal_default_instance() && drive_ != NULL;
}
inline void Request::clear_drive() {
  if (GetArenaNoVirtual() == NULL && drive_ != NULL) {
    delete drive_;
  }
  drive_ = NULL;
}
inline const ::ara::cfsnet::Drive& Request::drive() const {
  const ::ara::cfsnet::Drive* p = drive_;
  // @@protoc_insertion_point(field_get:ara.cfsnet.Request.drive)
  return p != NULL ? *p : *reinterpret_cast<const ::ara::cfsnet::Drive*>(
      &::ara::cfsnet::_Drive_default_instance_);
}
inline ::ara::cfsnet::Drive* Request::release_drive() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.Request.drive)
  
  ::ara::cfsnet::Drive* temp = drive_;
  drive_ = NULL;
  return temp;
}
inline ::ara::cfsnet::Drive* Request::mutable_drive() {
  
  if (drive_ == NULL) {
    drive_ = new ::ara::cfsnet::Drive;
  }
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.Request.drive)
  return drive_;
}
inline void Request::set_allocated_drive(::ara::cfsnet::Drive* drive) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete drive_;
  }
  if (drive) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      drive = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, drive, submessage_arena);
    }
    
  } else {
    
  }
  drive_ = drive;
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.Request.drive)
}

// .ara.cfsnet.Operation operation = 3;
inline void Request::clear_operation() {
  operation_ = 0;
}
inline ::ara::cfsnet::Operation Request::operation() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Request.operation)
  return static_cast< ::ara::cfsnet::Operation >(operation_);
}
inline void Request::set_operation(::ara::cfsnet::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.Request.operation)
}

// bytes buffer = 4;
inline void Request::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::buffer() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Request.buffer)
  return buffer_.GetNoArena();
}
inline void Request::set_buffer(const ::std::string& value) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.Request.buffer)
}
#if LANG_CXX11
inline void Request::set_buffer(::std::string&& value) {
  
  buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.Request.buffer)
}
#endif
inline void Request::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.Request.buffer)
}
inline void Request::set_buffer(const void* value, size_t size) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.Request.buffer)
}
inline ::std::string* Request::mutable_buffer() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.Request.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_buffer() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.Request.buffer)
  
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    
  } else {
    
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.Request.buffer)
}

// -------------------------------------------------------------------

// Resolve

// string path = 1;
inline void Resolve::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Resolve::path() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Resolve.path)
  return path_.GetNoArena();
}
inline void Resolve::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.Resolve.path)
}
#if LANG_CXX11
inline void Resolve::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.Resolve.path)
}
#endif
inline void Resolve::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.Resolve.path)
}
inline void Resolve::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.Resolve.path)
}
inline ::std::string* Resolve::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.Resolve.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Resolve::release_path() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.Resolve.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Resolve::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.Resolve.path)
}

// -------------------------------------------------------------------

// Response

// bytes nonce = 1;
inline void Response::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::nonce() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Response.nonce)
  return nonce_.GetNoArena();
}
inline void Response::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.Response.nonce)
}
#if LANG_CXX11
inline void Response::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.Response.nonce)
}
#endif
inline void Response::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.Response.nonce)
}
inline void Response::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.Response.nonce)
}
inline ::std::string* Response::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.Response.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_nonce() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.Response.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.Response.nonce)
}

// .ara.cfsnet.Drive drive = 2;
inline bool Response::has_drive() const {
  return this != internal_default_instance() && drive_ != NULL;
}
inline void Response::clear_drive() {
  if (GetArenaNoVirtual() == NULL && drive_ != NULL) {
    delete drive_;
  }
  drive_ = NULL;
}
inline const ::ara::cfsnet::Drive& Response::drive() const {
  const ::ara::cfsnet::Drive* p = drive_;
  // @@protoc_insertion_point(field_get:ara.cfsnet.Response.drive)
  return p != NULL ? *p : *reinterpret_cast<const ::ara::cfsnet::Drive*>(
      &::ara::cfsnet::_Drive_default_instance_);
}
inline ::ara::cfsnet::Drive* Response::release_drive() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.Response.drive)
  
  ::ara::cfsnet::Drive* temp = drive_;
  drive_ = NULL;
  return temp;
}
inline ::ara::cfsnet::Drive* Response::mutable_drive() {
  
  if (drive_ == NULL) {
    drive_ = new ::ara::cfsnet::Drive;
  }
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.Response.drive)
  return drive_;
}
inline void Response::set_allocated_drive(::ara::cfsnet::Drive* drive) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete drive_;
  }
  if (drive) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      drive = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, drive, submessage_arena);
    }
    
  } else {
    
  }
  drive_ = drive;
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.Response.drive)
}

// .ara.cfsnet.Operation operation = 3;
inline void Response::clear_operation() {
  operation_ = 0;
}
inline ::ara::cfsnet::Operation Response::operation() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Response.operation)
  return static_cast< ::ara::cfsnet::Operation >(operation_);
}
inline void Response::set_operation(::ara::cfsnet::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.Response.operation)
}

// .ara.cfsnet.Request request = 4;
inline bool Response::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline void Response::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) {
    delete request_;
  }
  request_ = NULL;
}
inline const ::ara::cfsnet::Request& Response::request() const {
  const ::ara::cfsnet::Request* p = request_;
  // @@protoc_insertion_point(field_get:ara.cfsnet.Response.request)
  return p != NULL ? *p : *reinterpret_cast<const ::ara::cfsnet::Request*>(
      &::ara::cfsnet::_Request_default_instance_);
}
inline ::ara::cfsnet::Request* Response::release_request() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.Response.request)
  
  ::ara::cfsnet::Request* temp = request_;
  request_ = NULL;
  return temp;
}
inline ::ara::cfsnet::Request* Response::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::ara::cfsnet::Request;
  }
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.Response.request)
  return request_;
}
inline void Response::set_allocated_request(::ara::cfsnet::Request* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete request_;
  }
  if (request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.Response.request)
}

// .ara.cfsnet.ErrorCode errorCode = 5;
inline void Response::clear_errorcode() {
  errorcode_ = 0;
}
inline ::ara::cfsnet::ErrorCode Response::errorcode() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Response.errorCode)
  return static_cast< ::ara::cfsnet::ErrorCode >(errorcode_);
}
inline void Response::set_errorcode(::ara::cfsnet::ErrorCode value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.Response.errorCode)
}

// bytes buffer = 6;
inline void Response::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::buffer() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Response.buffer)
  return buffer_.GetNoArena();
}
inline void Response::set_buffer(const ::std::string& value) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.Response.buffer)
}
#if LANG_CXX11
inline void Response::set_buffer(::std::string&& value) {
  
  buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.Response.buffer)
}
#endif
inline void Response::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.Response.buffer)
}
inline void Response::set_buffer(const void* value, size_t size) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.Response.buffer)
}
inline ::std::string* Response::mutable_buffer() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.Response.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_buffer() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.Response.buffer)
  
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    
  } else {
    
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.Response.buffer)
}

// -------------------------------------------------------------------

// Stat

// uint32 uid = 1;
inline void Stat::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 Stat::uid() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Stat.uid)
  return uid_;
}
inline void Stat::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.Stat.uid)
}

// uint32 gid = 2;
inline void Stat::clear_gid() {
  gid_ = 0u;
}
inline ::google::protobuf::uint32 Stat::gid() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Stat.gid)
  return gid_;
}
inline void Stat::set_gid(::google::protobuf::uint32 value) {
  
  gid_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.Stat.gid)
}

// uint32 mode = 3;
inline void Stat::clear_mode() {
  mode_ = 0u;
}
inline ::google::protobuf::uint32 Stat::mode() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Stat.mode)
  return mode_;
}
inline void Stat::set_mode(::google::protobuf::uint32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.Stat.mode)
}

// uint64 size = 4;
inline void Stat::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Stat::size() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Stat.size)
  return size_;
}
inline void Stat::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.Stat.size)
}

// uint64 atime = 5;
inline void Stat::clear_atime() {
  atime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Stat::atime() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Stat.atime)
  return atime_;
}
inline void Stat::set_atime(::google::protobuf::uint64 value) {
  
  atime_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.Stat.atime)
}

// uint64 ctime = 6;
inline void Stat::clear_ctime() {
  ctime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Stat::ctime() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Stat.ctime)
  return ctime_;
}
inline void Stat::set_ctime(::google::protobuf::uint64 value) {
  
  ctime_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.Stat.ctime)
}

// uint64 mtime = 7;
inline void Stat::clear_mtime() {
  mtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Stat::mtime() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Stat.mtime)
  return mtime_;
}
inline void Stat::set_mtime(::google::protobuf::uint64 value) {
  
  mtime_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.Stat.mtime)
}

// uint64 blocks = 8;
inline void Stat::clear_blocks() {
  blocks_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Stat::blocks() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.Stat.blocks)
  return blocks_;
}
inline void Stat::set_blocks(::google::protobuf::uint64 value) {
  
  blocks_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.Stat.blocks)
}

// -------------------------------------------------------------------

// StatFile

// string path = 1;
inline void StatFile::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatFile::path() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.StatFile.path)
  return path_.GetNoArena();
}
inline void StatFile::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.StatFile.path)
}
#if LANG_CXX11
inline void StatFile::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.StatFile.path)
}
#endif
inline void StatFile::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.StatFile.path)
}
inline void StatFile::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.StatFile.path)
}
inline ::std::string* StatFile::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.StatFile.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatFile::release_path() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.StatFile.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatFile::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.StatFile.path)
}

// -------------------------------------------------------------------

// String

// string value = 1;
inline void String::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& String::value() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.String.value)
  return value_.GetNoArena();
}
inline void String::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.String.value)
}
#if LANG_CXX11
inline void String::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.String.value)
}
#endif
inline void String::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.String.value)
}
inline void String::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.String.value)
}
inline ::std::string* String::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.String.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* String::release_value() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.String.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void String::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.String.value)
}

// -------------------------------------------------------------------

// TouchFile

// string path = 1;
inline void TouchFile::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TouchFile::path() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.TouchFile.path)
  return path_.GetNoArena();
}
inline void TouchFile::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.TouchFile.path)
}
#if LANG_CXX11
inline void TouchFile::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.TouchFile.path)
}
#endif
inline void TouchFile::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.TouchFile.path)
}
inline void TouchFile::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.TouchFile.path)
}
inline ::std::string* TouchFile::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.TouchFile.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TouchFile::release_path() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.TouchFile.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TouchFile::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.TouchFile.path)
}

// -------------------------------------------------------------------

// UnlinkFile

// string path = 1;
inline void UnlinkFile::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnlinkFile::path() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.UnlinkFile.path)
  return path_.GetNoArena();
}
inline void UnlinkFile::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.UnlinkFile.path)
}
#if LANG_CXX11
inline void UnlinkFile::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.UnlinkFile.path)
}
#endif
inline void UnlinkFile::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.UnlinkFile.path)
}
inline void UnlinkFile::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.UnlinkFile.path)
}
inline ::std::string* UnlinkFile::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.UnlinkFile.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnlinkFile::release_path() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.UnlinkFile.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnlinkFile::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.UnlinkFile.path)
}

// -------------------------------------------------------------------

// WriteFile

// string path = 1;
inline void WriteFile::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteFile::path() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.WriteFile.path)
  return path_.GetNoArena();
}
inline void WriteFile::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.WriteFile.path)
}
#if LANG_CXX11
inline void WriteFile::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.WriteFile.path)
}
#endif
inline void WriteFile::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.WriteFile.path)
}
inline void WriteFile::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.WriteFile.path)
}
inline ::std::string* WriteFile::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.WriteFile.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteFile::release_path() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.WriteFile.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteFile::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.WriteFile.path)
}

// bytes buffer = 2;
inline void WriteFile::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteFile::buffer() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.WriteFile.buffer)
  return buffer_.GetNoArena();
}
inline void WriteFile::set_buffer(const ::std::string& value) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ara.cfsnet.WriteFile.buffer)
}
#if LANG_CXX11
inline void WriteFile::set_buffer(::std::string&& value) {
  
  buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ara.cfsnet.WriteFile.buffer)
}
#endif
inline void WriteFile::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ara.cfsnet.WriteFile.buffer)
}
inline void WriteFile::set_buffer(const void* value, size_t size) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ara.cfsnet.WriteFile.buffer)
}
inline ::std::string* WriteFile::mutable_buffer() {
  
  // @@protoc_insertion_point(field_mutable:ara.cfsnet.WriteFile.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteFile::release_buffer() {
  // @@protoc_insertion_point(field_release:ara.cfsnet.WriteFile.buffer)
  
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteFile::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    
  } else {
    
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:ara.cfsnet.WriteFile.buffer)
}

// uint32 start = 3;
inline void WriteFile::clear_start() {
  start_ = 0u;
}
inline ::google::protobuf::uint32 WriteFile::start() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.WriteFile.start)
  return start_;
}
inline void WriteFile::set_start(::google::protobuf::uint32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.WriteFile.start)
}

// uint32 end = 4;
inline void WriteFile::clear_end() {
  end_ = 0u;
}
inline ::google::protobuf::uint32 WriteFile::end() const {
  // @@protoc_insertion_point(field_get:ara.cfsnet.WriteFile.end)
  return end_;
}
inline void WriteFile::set_end(::google::protobuf::uint32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:ara.cfsnet.WriteFile.end)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cfsnet
}  // namespace ara

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ara::cfsnet::FileMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ara::cfsnet::FileMode>() {
  return ::ara::cfsnet::FileMode_descriptor();
}
template <> struct is_proto_enum< ::ara::cfsnet::ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ara::cfsnet::ErrorCode>() {
  return ::ara::cfsnet::ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::ara::cfsnet::Operation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ara::cfsnet::Operation>() {
  return ::ara::cfsnet::Operation_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cfsnet_2eproto__INCLUDED
